{"version":3,"file":"mv-core.mjs","sources":["../../../projects/mv-client-core/src/mv-core/mv-client-core.service.ts","../../../projects/mv-client-core/src/mv-core/material.module.ts","../../../projects/mv-client-core/src/mv-core/mv-components/mv-textbox/component.ts","../../../projects/mv-client-core/src/mv-core/mv-components/mv-textbox/component.html","../../../projects/mv-client-core/src/mv-core/mv-components/mv-dropdown/component.ts","../../../projects/mv-client-core/src/mv-core/mv-components/mv-dropdown/component.html","../../../projects/mv-client-core/src/mv-core/mv-components/mv-textarea/component.ts","../../../projects/mv-client-core/src/mv-core/mv-components/mv-textarea/component.html","../../../projects/mv-client-core/src/mv-core/mv-components/mv-form-generator/component.ts","../../../projects/mv-client-core/src/mv-core/mv-components/mv-form-generator/component.html","../../../projects/mv-client-core/src/mv-core/mv-components/mv-checkbox/component.ts","../../../projects/mv-client-core/src/mv-core/mv-components/mv-checkbox/component.html","../../../projects/mv-client-core/src/mv-core/mv-components/mv-datepicker/component.ts","../../../projects/mv-client-core/src/mv-core/mv-components/mv-datepicker/component.html","../../../projects/mv-client-core/src/mv-core/mv-components/mv-primary-button/component.ts","../../../projects/mv-client-core/src/mv-core/mv-components/mv-primary-button/component.html","../../../projects/mv-client-core/src/mv-core/mv-components/mv-components.module.ts","../../../projects/mv-client-core/src/mv-core/mv-core-app.module.ts","../../../projects/mv-client-core/src/mv-core/mv-form-core/clientConfig.ts","../../../projects/mv-client-core/src/mv-core/mv-form-core/clientContext.ts","../../../projects/mv-client-core/src/mv-core/mv-form-core/conventions.ts","../../../projects/mv-client-core/src/mv-core/mv-form-core/formData.ts","../../../projects/mv-client-core/src/mv-core/mv-form-core/form.ts","../../../projects/mv-client-core/src/mv-core/mv-form-core/serviceAgent.ts","../../../projects/mv-client-core/src/mv-core/mv-form-core/types.ts","../../../projects/mv-client-core/src/mv-core/mv-form-core/form.module.ts","../../../projects/mv-client-core/src/mv-core/mv-form-core/messageService.ts","../../../projects/mv-client-core/src/public-api.ts","../../../projects/mv-client-core/src/mv-core.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MvClientCoreService {\n\n  constructor() { }\n}\n","import {\n  NgModule\n} from '@angular/core';\nimport {\n  MatFormFieldModule\n} from '@angular/material/form-field';\nimport {\n  MatInputModule\n} from '@angular/material/input';\nimport {\n  MatSelectModule\n} from '@angular/material/select';\nimport {\n  MatCardModule\n} from '@angular/material/card';\nimport {\n  MatCheckboxModule\n} from '@angular/material/checkbox';\nimport {\n  MatDatepickerModule\n} from '@angular/material/datepicker';\nimport {\n  MatTooltipModule\n} from '@angular/material/tooltip';\nimport {\n  MatButtonModule\n} from '@angular/material/button';\nimport {\n  MatSnackBarModule\n} from '@angular/material/snack-bar';\n\nconst materialModules = [\n  MatFormFieldModule,\n  MatInputModule,\n  MatSelectModule,\n  MatCheckboxModule,\n  MatCardModule,\n  MatDatepickerModule,\n  MatTooltipModule,\n  MatButtonModule,\n  MatSnackBarModule\n];\n\n@NgModule({\n  imports: [\n    ...materialModules\n  ],\n  exports: [\n    ...materialModules\n  ]\n})\n\nexport class MaterialModule {}\n","import {\r\n\tComponent,\r\n\tInput,\r\n\tOutput,\r\n\tEventEmitter,\r\n\tOnInit\r\n} from '@angular/core';\r\nimport {\r\n\tFormControl\r\n} from '@angular/forms';\r\nimport { Field } from '../../mv-form-core/form';\r\nimport { FormData } from '../../mv-form-core/formData';\r\n/**\r\n * app-mv -> metadev component prefix\r\n */\r\n@Component({\r\n\tselector: 'app-mv-textbox',\r\n\ttemplateUrl: './component.html',\r\n\tstyleUrls: []\r\n})\r\n\r\n/** \r\n * Wrapper class for angular material.\r\n * Unpacks values from the model to render a textbox\r\n * @ouput - valueChange - value change emitter.\r\n */\r\nexport class MvTextboxComponent implements OnInit {\r\n\t@Input() public field: Field  | undefined = {\r\n\t\tlabel:\"\",\r\n\t\tname:\"\",\r\n\t\tvalueType:0,\r\n\t\terrorId:\"\",\r\n\t\thint:\"\",\r\n\t\tisRequired:true,\r\n\t};\r\n\t@Input() public formData: FormData | undefined;\r\n\t@Input() public type: string | undefined;\r\n\t@Output() public valueChange = new EventEmitter < any > ();\r\n\r\n\r\n\tcontrol: FormControl | undefined;\r\n\r\n\t/**\r\n\t * On component initalization get\r\n\t * form contorl from the formData\r\n\t */\r\n\tngOnInit() {\r\n\t\tif(this.formData && this.field) {\r\n\t\t\tthis.control = this.formData.formGroup.get(this.field.name) as FormControl;\r\n\t\r\n\t\t}\r\n\t}\r\n\r\n\tvalueChangeDetector(_$event:any) {\r\n\t\tif(this.formData && this.field) {\r\n\t\tthis.valueChange.next(this.formData.getFieldValue(this.field.name));\r\n\t\t}\r\n\t}\r\n}","<mat-form-field class=\"col-md-12\" appearance=\"fill\">\r\n  <mat-label>{{field?.label}} <span *ngIf=\"!field?.isRequired\" class=\"optional\">(optional)</span></mat-label>\r\n  <span matPrefix>{{field?.prefix}}</span>\r\n  <input *ngIf=\"control\" [formControl]=\"control\" matInput (input)=\"valueChangeDetector($event)\"\r\n    [readonly]=\"field?.isEditable\" placeholder=\"{{field?.placeHolder}}\">\r\n  <mat-hint>{{field?.hint}}</mat-hint>\r\n  <mat-icon matSuffix>{{field?.icon}}</mat-icon>\r\n  <mat-error>\r\n    <div *ngIf=\"this.control?.errors\">\r\n      {{this.field?.errorId}}\r\n    </div>\r\n  </mat-error>\r\n","import {\r\n\tComponent,\r\n\tInput,\r\n\tOutput,\r\n\tEventEmitter,\r\n\tOnInit\r\n} from '@angular/core';\r\nimport {\r\n\tFormControl\r\n} from '@angular/forms';\r\nimport { Field } from '../../mv-form-core/form';\r\nimport { FormData } from '../../mv-form-core/formData';\r\n/**\r\n * app-mv -> metadev component prefix\r\n */\r\n@Component({\r\n\tselector: 'app-mv-dropdown',\r\n\ttemplateUrl: './component.html',\r\n\tstyleUrls: []\r\n})\r\n\r\n/** \r\n * Wrapper class for angular material.\r\n * Unpacks values from the model to render a dropdown\r\n */\r\n\r\nexport class MvDropDownComponent implements OnInit {\r\n\t@Input() public field: Field  | undefined = {\r\n\t\tlabel:\"\",\r\n\t\tname:\"\",\r\n\t\tvalueType:0,\r\n\t\terrorId:\"\",\r\n\t\thint:\"\",\r\n\t\tisRequired:true,\r\n\t};\r\n\t@Input() public formData: FormData | undefined;\r\n\t@Input() public type: string | undefined;\r\n\t@Output() public valueChange = new EventEmitter < string > ();\r\n\t@Output() public changeListener = new EventEmitter < any > ();\r\n\r\n\tpublic formControl: FormControl | undefined;\r\n\r\n\tngOnInit() {\r\n\t\tif(this.formData && this.field) {\r\n\t\t\tthis.formControl = this.formData.formGroup.get(this.field.name) as FormControl;\r\n\t\t\tthis.formControl.valueChanges.subscribe(value => {\r\n\t\t\t\tthis.changeListener.next(value)\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\tcurrentValue(value: any) {\r\n\t\tthis.valueChange.next(value);\r\n\t}\r\n}","<mat-form-field class=\"col-md-12\" appearance=\"fill\">\r\n  <mat-label>{{field?.label}}<span *ngIf=\"!field?.isRequired\" class=\"optional\">(optional)</span></mat-label>\r\n  <mat-select disableOptionCentering=\"true\" (selectionChange)=\"currentValue($event.value);\"\r\n    [required]=\"field?.isRequired\" placeholder=\"{{field?.placeHolder}}\" [formControl]=\"formControl\">\r\n    <mat-option *ngIf=\"!field?.isRequired\">None</mat-option>\r\n    <mat-option *ngFor=\"let list of formData?.lists[field?.name]\" [(value)]=\"list.value\">\r\n      {{list.text}}\r\n    </mat-option>\r\n  </mat-select>\r\n  <mat-error>\r\n    <div *ngIf=\"this.formControl?.errors\">\r\n      {{this.field.errorId}}\r\n    </div>\r\n  </mat-error>\r\n</mat-form-field>\r\n","import {\r\n\tComponent,\r\n\tInput,\r\n\tOutput,\r\n\tEventEmitter,\r\n\tOnInit\r\n} from '@angular/core';\r\nimport {\r\n\tFormControl\r\n} from '@angular/forms';\r\nimport { Field } from '../../mv-form-core/form';\r\nimport { FormData } from '../../mv-form-core/formData';\r\n\r\n/**\r\n * app-mv -> metadev component prefix\r\n */\r\n@Component({\r\n\tselector: 'app-mv-textarea',\r\n\ttemplateUrl: './component.html',\r\n\tstyleUrls: []\r\n})\r\n\r\n/** \r\n * Wrapper class for angular material.\r\n * Unpacks values from the model to render a textarea\r\n * @ouput - valueChange - value change emitter.\r\n */\r\nexport class MvTextareaComponent implements OnInit {\r\n\t@Input() public field: Field  | undefined = {\r\n\t\tlabel:\"\",\r\n\t\tname:\"\",\r\n\t\tvalueType:0,\r\n\t\terrorId:\"\",\r\n\t\thint:\"\",\r\n\t\tisRequired:true,\r\n\t};\r\n\t@Input() public formData: FormData | undefined;\r\n\t@Input() public type: string | undefined;\r\n\t@Output() public valueChange = new EventEmitter < any > ();\r\n\r\n\r\n\tcontrol: FormControl | undefined;\r\n\r\n\tngOnInit() {\r\n\t\tif(this.formData && this.field) {\r\n\t\t\tthis.control = this.formData.formGroup.get(this.field.name) as FormControl;\r\n\t\t}\r\n\t}\r\n\t\r\n\tvalueChangeDetector(_$event:any) {\r\n\t\tif(this.formData && this.field) {\r\n\t\t\tthis.valueChange.next(this.formData?.getFieldValue(this.field.name));\r\n\t\t}\r\n\t}\r\n}","<mat-form-field class=\"col-md-12\" appearance=\"fill\">\r\n\t<mat-label>{{field?.label}} <span *ngIf=\"!field?.isRequired\" class=\"optional\">(optional)</span></mat-label>\r\n\t<span matPrefix>{{field?.prefix}}</span>\r\n\t<textarea [formControl]=\"control\" matInput (input)=\"valueChangeDetector($event)\"\r\n\t\t[required]=\"field?.isRequired\" [readonly]=\"field?.isEditable\" placeholder=\"{{field?.placeHolder}}\"> </textarea>\r\n\t<mat-hint>{{field?.hint}}</mat-hint>\r\n\t<mat-icon matSuffix>{{field?.icon}}</mat-icon>\r\n\t<mat-error>\r\n\t\t<div *ngIf=\"this.control?.errors\">\r\n\t\t\t{{this.field.errorId}}\r\n\t\t</div>\r\n\t</mat-error>\r\n</mat-form-field>","import {\r\n\tComponent,\r\n\tInput,\r\n\tOnInit\r\n} from '@angular/core';\r\nimport {\r\n\tFormControl\r\n} from '@angular/forms';\r\nimport { Form } from '../../mv-form-core/form';\r\nimport { FormData } from '../../mv-form-core/formData';\r\n\r\n@Component({\r\n\tselector: 'app-mv-form-generator',\r\n\ttemplateUrl: './component.html',\r\n\tstyleUrls: []\r\n})\r\n\r\n/**\r\n * The componenet unpacks the formdata (input)\r\n * and renders the all the fields of the form.\r\n * The component uses Metadev (Mv) components to\r\n * render the fields\r\n * @formData - FormData \r\n */\r\n\r\nexport class MvFormGeneratorComponent implements OnInit {\r\n\t@Input() public formData: FormData | undefined;\r\n\r\n\tfields: any;\r\n\tform: Form | undefined;\r\n\tcontrol: FormControl | undefined;\r\n\r\n\tngOnInit() {\r\n\t\tthis.form = this.formData?.form;\r\n\t\tthis.fields = this.formData?.form.fields;\r\n\t}\r\n}","<mat-card class=\"col-md-12\" style=\"margin: 0 auto;\">\r\n  <div *ngFor=\"let field of fields | keyvalue\" [ngSwitch]=\"field.value.controlType\">\r\n    <app-mv-textbox class=\"col\" *ngSwitchCase=\"'Input'\" [field]=\"form[field.key]\" [formData]=\"formData\"></app-mv-textbox>\r\n    <app-mv-textarea class=\"col\" *ngSwitchCase=\"'Textarea'\" [field]=\"form[field.key]\" [formData]=\"formData\"></app-mv-textarea>\r\n    <app-mv-dropdown class=\"col\" *ngSwitchCase=\"'Dropdown'\" [field]=\"form[field.key]\" [formData]=\"formData\"></app-mv-dropdown>\r\n  </div>\r\n</mat-card>\r\n","import {\r\n\tComponent,\r\n\tInput,\r\n\tOutput,\r\n\tEventEmitter,\r\n\tOnInit\r\n} from '@angular/core';\r\nimport {\r\n\tFormControl\r\n} from '@angular/forms';\r\nimport { Field } from '../../mv-form-core/form';\r\nimport { FormData } from '../../mv-form-core/formData';\r\n\r\n@Component({\r\n\tselector: 'app-mv-checkbox',\r\n\ttemplateUrl: './component.html',\r\n\tstyleUrls: []\r\n})\r\nexport class MvCheckboxComponent implements OnInit {\r\n\t@Input() public field: Field  | undefined = {\r\n\t\tlabel:\"\",\r\n\t\tname:\"\",\r\n\t\tvalueType:0,\r\n\t\terrorId:\"\",\r\n\t\thint:\"\",\r\n\t\tisRequired:true,\r\n\t};\r\n\t@Input() public formData: FormData | undefined;\r\n\t@Output() public valueChange = new EventEmitter < boolean > ();\r\n\t@Output() public changeListener = new EventEmitter < any > ();\r\n\tpublic control: FormControl | undefined;\r\n\tpublic isChecked: boolean = false;\r\n\r\n\tngOnInit() {\r\n\t\tif(this.formData && this.field) {\r\n\t\t\tthis.control = this.formData.formGroup.get(this.field.name) as FormControl;\r\n\t\t\tthis.isChecked = this.control.value;\r\n\t\t\tthis.control.valueChanges.subscribe(value => {\r\n\t\t\t\tthis.changeListener.next(value)\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tchanged() {\r\n\t\tthis.isChecked = this.control?.value;\r\n\t\tthis.valueChange.next(this.control?.value);\r\n\t}\r\n}","<div class=\"col-md-12\">\r\n  <mat-checkbox class=\"align-margin\" (change)=\"changed()\" [formControl]=\"control\">{{field?.label}}</mat-checkbox>\r\n</div>","import {\r\n\tComponent,\r\n\tInput,\r\n\tViewEncapsulation,\r\n\tInjectable,\r\n\tOnInit\r\n} from '@angular/core';\r\nimport {\r\n\tFormControl\r\n} from '@angular/forms';\r\nimport {\r\n\tNativeDateAdapter,\r\n\tDateAdapter\r\n} from '@angular/material/core';\r\nimport { Field } from '../../mv-form-core/form';\r\nimport { FormData } from '../../mv-form-core/formData';\r\n\r\n@Injectable()\r\n\r\n@Component({\r\n\tselector: 'app-mv-date',\r\n\ttemplateUrl: './component.html',\r\n\tstyleUrls: [],\r\n\tproviders: [],\r\n\tencapsulation: ViewEncapsulation.Emulated,\r\n})\r\nexport class MvDatePickerComponent implements OnInit {\r\n\t@Input() public field: Field  | undefined = {\r\n\t\tlabel:\"\",\r\n\t\tname:\"\",\r\n\t\tvalueType:0,\r\n\t\terrorId:\"\",\r\n\t\thint:\"\",\r\n\t\tisRequired:true,\r\n\t};\r\n\t@Input() public formData: FormData | undefined;\r\n\r\n\tpublic formControl: FormControl | undefined;\r\n\tpublic today = new Date();\r\n\tconstructor(private dateAdapter: DateAdapter < Date > ) {\r\n\t\tdateAdapter.setLocale('en-in');\r\n\t}\r\n\tngOnInit() {\r\n\t\tif(this.formData && this.field) {\r\n\t\t\tthis.formControl = this.formData?.formGroup.get(this.field.name) as FormControl;\r\n\t\t\tthis.formControl.setValue(this.today);\r\n\t\t}\r\n\t}\r\n\t\r\n\tdateChange(_$event: any) {\r\n\t\tthis.formControl?.setValue((this.formControl?.value).format(\"YYYY-MM-DD\"))\r\n\t}\r\n}","<mat-form-field class=\"col-md-12\" appearance=\"fill\">\r\n\t<mat-label>{{field?.label}}<span *ngIf=\"!field?.isRequired\" class=\"optional\">(optional)</span></mat-label>\r\n\t<input matInput [matDatepicker]=\"picker\" [required]=\"field?.isRequired\" [formControl]=formControl\r\n\t\t(dateChange)=\"dateChange($event)\">\r\n\t<mat-datepicker-toggle matSuffix [for]=\"picker\" style=\"outline: none;\"></mat-datepicker-toggle>\r\n\t<mat-datepicker style=\"outline: none;\" #picker></mat-datepicker>\r\n</mat-form-field>","import { Component, Input} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-mv-primary-button',\r\n  templateUrl: \"./component.html\",\r\n})\r\n\r\n\r\nexport class MvPrimaryButtonComponent {\r\n  @Input() name?:string;\r\n  @Input() tooltip?:string;\r\n  @Input() isDisabled:boolean=false;\r\n  constructor() {}\r\n}\r\n","\r\n<button [disabled]=\"isDisabled\" mat-raised-button color=\"primary\">{{name}}</button>\r\n\r\n","import {\n  NgModule\n} from '@angular/core';\nimport {\n  CommonModule\n} from '@angular/common';\nimport {\n  ReactiveFormsModule\n} from '@angular/forms';\n\nimport {\n  MaterialModule\n} from '../material.module';\nimport {\n  MvTextboxComponent\n} from './mv-textbox/component';\nimport {\n  MvDropDownComponent\n} from './mv-dropdown/component';\nimport { MvTextareaComponent } from './mv-textarea/component';\nimport { MvFormGeneratorComponent } from './mv-form-generator/component';\nimport { MvCheckboxComponent } from './mv-checkbox/component';\nimport { MvDatePickerComponent } from './mv-datepicker/component';\nimport { MvPrimaryButtonComponent } from './mv-primary-button/component';\n\n@NgModule({\n  declarations: [\n    MvTextboxComponent,\n    MvDropDownComponent,\n    MvTextareaComponent,\n    MvFormGeneratorComponent,\n    MvCheckboxComponent,\n    MvDatePickerComponent,\n    MvPrimaryButtonComponent,\n  ],\n  imports: [\n    CommonModule,\n    MaterialModule,\n    ReactiveFormsModule\n  ],\n  exports: [\n    MvTextboxComponent,\n    MvDropDownComponent,\n    MvTextareaComponent,\n    MvFormGeneratorComponent,\n    MvCheckboxComponent,\n    MvDatePickerComponent,\n    MvPrimaryButtonComponent\n  ]\n})\nexport class MVComponentsModule {}\n","import { NgModule } from \"@angular/core\";\nimport { ReactiveFormsModule, FormsModule } from \"@angular/forms\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { MaterialModule } from \"./material.module\";\nimport { FormModule } from \"./mv-form-core/form.module\";\nimport { MVComponentsModule } from \"../mv-core/mv-components/mv-components.module\";\n\n@NgModule({\n    declarations:[],\n    imports: [MaterialModule, MVComponentsModule],\n    providers:[ReactiveFormsModule,FormsModule,CommonModule],\n    exports: [MaterialModule, MVComponentsModule]\n})\n\nexport class MVClientCoreAppModule {}","import { Injectable } from '@angular/core';\n\n@Injectable({ providedIn: \"root\" })\nexport class ClientConfig {\n    url = 'http://localhost:8080/a';\n}","/**\n * acts as a cache from session storage. designed keeping in mind that\n * most session-scoped data is stored-once-accessed-often\n */\nimport {\n  Injectable\n} from \"@angular/core\";\n\n\nconst USER = \"_user\";\nconst TOKEN = \"_token\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ClientContext {\n  constructor() {}\n  private values = new Map < string, any > ();\n  private validPages = {};\n  private validPagesArray = [];\n\n  public setToken(token: string) {\n    this.setValue(TOKEN, token);\n  }\n\n\n  /**\n   * any data that  is to be saved as part of session.\n   * This will survive page reloads, but not browser closure\n   *\n   * @param key\n   * @param value\n   */\n  public setValue(key: string, value: any): void {\n    this.values.set(key, value);\n    if (value == null) {\n      sessionStorage.removeItem(key);\n    } else {\n      sessionStorage.setItem(key, JSON.stringify(value));\n    }\n  }\n\n  /**\n   * value of a field that is session scoped\n   * @param key\n   */\n  public getValue(key: string): any {\n    let value = this.values.get(key);\n    if (value) {\n      return value;\n    }\n    const s = sessionStorage.getItem(key);\n    if (!s) {\n      return s;\n    }\n    value = s;\n    this.values.set(key, value);\n    return value;\n  }\n\n  /**\n   * details of logged-in user.\n   */\n  public getToken(): string {\n    return this.getValue(TOKEN) as string;\n  }\n}","/**\r\n * constants/conventions that are used across layers.\r\n * These are fixed at design time. deployment-time parameters can be found in Config\r\n */\r\nexport class Conventions {\r\n    /**\r\n     * HTTP headers\r\n     */\r\n\tstatic HEADER_SERVICE = '_s';\r\n\tstatic HEADER_AUTH = 'Authorization';\r\n\t\r\n    /**\r\n     * tags or field names in the paylaod back-and-forth\r\n     */\r\n    static TAG_MESSAGES = 'messages';\r\n\tstatic TAG_ALL_OK = 'allOk';\r\n\tstatic TAG_DATA = 'data';\r\n\tstatic TAG_LIST = 'list';\r\n\tstatic TAG_MAX_ROWS = 'maxRows';\r\n\tstatic TAG_CONDITIONS = 'conditions';\r\n\tstatic TAG_FILTER_COMP = 'comp';\r\n\tstatic TAG_FILTER_VALUE = 'value';\r\n    static TAG_FILTER_VALUE_TO = 'toValue';\r\n    \r\n     /**\r\n     * special pre-defined service to get drop-down values\r\n     */\r\n    public static SERVICE_LIST = 'list';\r\n    /*\r\n\t * form I/O service prefixes\r\n\t */\r\n    static OP_FETCH = 'get';\r\n    static OP_NEW = 'create';\r\n    static OP_UPDATE = 'update';\r\n    static OP_DELETE = 'delete';\r\n    static OP_FILTER = 'filter';\r\n    static OP_BULK = 'bulk';\r\n\r\n\t/*\r\n\t * filter operators\r\n\t */\r\n    static FILTER_EQ = '=';\r\n    static FILTER_NE = '!=';\r\n    static FILTER_LE = '<=';\r\n    static FILTER_LT = '<';\r\n    static FILTER_GE = '>=';\r\n    static FILTER_GT = '>';\r\n    static FILTER_BETWEEN = '><';\r\n    static FILTER_STARTS_WITH = '^';\r\n    static FILTER_CONTAINS = '~';\r\n    \r\n    /*\r\n     * value types of fields \r\n     */\r\n    static TYPE_TEXT = 0;\r\n\tstatic TYPE_INTEGER = 1;\r\n\tstatic TYPE_DECIMAL = 2;\r\n\tstatic TYPE_BOOLEAN = 3;\r\n\tstatic TYPE_DATE = 4;\r\n\tstatic TYPE_TIMESTAMP = 5;\r\n}\r\n","import { FormControl, FormGroup, ValidatorFn } from '@angular/forms';\r\nimport { SelectOption, Vo, FieldValues, Message, FilterRequest } from './types';\r\nimport { Form, Field, ChildForm } from './form';\r\nimport { ServiceAgent } from './serviceAgent';\r\nimport { Conventions } from './conventions';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { valuesDictionary } from './default-interface';\r\n\r\n\r\n\r\nexport class PanelData {\r\n    /**\r\n    * data as received from the server\r\n    */\r\n    data: Vo = {};\r\n\t/**\r\n\t * data for child forms that ane non-tabular\r\n \t */\r\n    childData: Map<string, PanelData | FormData> = new Map();\r\n    /** \r\n    * data for child forms that are tabukar\r\n    */\r\n    childTabularData: Map<string, TabularData> = new Map();\r\n    /**\r\n     * set to true when a service is requested from the server.\r\n     * this can be used by the view-component to indicate aciton \r\n     */\r\n    waitingForServerResponse: boolean = false;\r\n    /**\r\n       * errors returned by the server\r\n       */\r\n    errors: string[] = [];\r\n    /**\r\n     * warnings returned by the server\r\n     */\r\n    warnings: string[] = [];\r\n\r\n    /**\r\n     * informations messages received by the server\r\n     */\r\n    info: string[] = [];\r\n\r\n    /**\r\n     * form controls for fields/children. empty if this panel is not editable\r\n     */\r\n    formGroup: FormGroup;\r\n\r\n    protected hasFg = false;\r\n    constructor(public readonly form: Form, protected readonly serverAgent: ServiceAgent) {\r\n        this.formGroup = new FormGroup({});\r\n        if (!form.childForms) {\r\n            return;\r\n        }\r\n        \r\n        form.childForms.forEach((child: ChildForm, key: string) => {\r\n            if (child.isTabular && child.isEditable) {\r\n                this.childTabularData.set(key, new TabularData(child.form, serverAgent, child.isEditable));\r\n            } else {\r\n                if (child.isEditable) {\r\n                    this.childData.set(key, new FormData(child.form, serverAgent));\r\n                } else {\r\n                    this.childData.set(key, new PanelData(child.form, serverAgent));\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get data as a Value Object. HAs values as received from the server.\r\n     * Any input field/control DOES not have the lates value entered by the user.\r\n     * getFieldValue() must be used to get the current value of an input field.\r\n     */\r\n    public getRawData(): Vo {\r\n        return this.data;\r\n    }\r\n\r\n    /**\r\n    * @override data is to be set to form group\r\n    * @param data as received from a service request\r\n    */\r\n    public setAll(data: Vo) {\r\n        if (!data) {\r\n            data = {};\r\n        }\r\n        this.data = data;\r\n        if (this.hasFg) {\r\n            this.formGroup.patchValue(data);\r\n        }\r\n\r\n        this.childData.forEach((fd, key) => {\r\n            fd.setAll(data[key] as Vo || {});\r\n        });\r\n\r\n        this.childTabularData.forEach((table, key) => {\r\n            table.setAll(data[key] as Vo[] || []);\r\n        });\r\n    }\r\n\r\n    /**\r\n\t * @returns object contianing all data from form controls. as well as all child forms.\r\n     * Note that this data will not contain fields from non-form panel\r\n\t */\r\n    public extractAll(): Vo {\r\n        const d = this.hasFg ? this.formGroup.value : this.data;\r\n        this.childData.forEach((fd, key) => {\r\n            d[key] = fd.extractAll();\r\n        });\r\n\r\n        this.childTabularData.forEach((table, key) => {\r\n            d[key] = table.extractAll();\r\n        });\r\n        return d;\r\n    }\r\n\r\n    /**\r\n\t * @returns object contianing all data from form controls, or raw data as recived, but no tany child-data.\r\n     * That is why the returned type id FieldValues and not Vo\r\n\t */\r\n    public extractAllFields(): FieldValues {\r\n        return this.hasFg ? this.formGroup.value : this.data;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param name name of the field. Valid field names can be picked up from \r\n     * static definitions in the form \r\n     * @param value \r\n     */\r\n    public setFieldValue(name: string, value: string | number | boolean | null) {\r\n        const fc = this.formGroup.controls[name];\r\n        if (fc) {\r\n            fc.setValue(value);\r\n        }\r\n\r\n        this.data[name] = value;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param values name-value pairs to be se to this data \r\n     */\r\n    public setFieldValues(values: FieldValues): void {\r\n        Object.keys(values).forEach(key => {\r\n            this.setFieldValue(key, values[key]);\r\n        });\r\n    }\r\n    /**\r\n      * \r\n      * @param name name of the field. \r\n      * concrete classes over-ride this method to restict name values to their valid list\r\n      * @returns value of this field, or null/undefined if this is not a field\r\n      */\r\n    public getFieldValue(name: string): string | number | boolean {\r\n        const fc = this.formGroup.controls[name];\r\n        if (fc) {\r\n            return fc.value;\r\n        }\r\n\r\n        return this.data[name] as string | number | boolean;\r\n    }\r\n\r\n    /**\r\n     * @param names to be extracted\r\n     * @returns data-object with name-values. null if no value is found for a field \r\n     */\r\n    public getFieldValues(names: string[]): FieldValues {\r\n        let values:valuesDictionary = {};\r\n        names.forEach(key => {\r\n            values[key] = this.getFieldValue(key);\r\n        });\r\n        return values;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param name name of the child field. \r\n     * Valid child names are available as static members of the form\r\n     * @returns appropriate data for the child form. null/undefined if no such child\r\n     */\r\n    public getChildData(name: string): PanelData | FormData | undefined {\r\n        if (this.childData) {\r\n            return this.childData.get(name);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param name name of the child field. \r\n     * Valid child names are available as static members of the form\r\n     * @returns appropriate data for the child form. null/undefined if no such child\r\n     */\r\n    public getChildTable(name: string): TabularData | undefined {\r\n        if (this.childTabularData) {\r\n            return this.childTabularData.get(name);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * extarct key fields only\r\n     */\r\n    public extractKeyFields(): FieldValues | null {\r\n        if (this.form.keyFields && this.form.keyFields.length) {\r\n            return this.extractFields(this.form.keyFields);\r\n        }\r\n        console.info('Form has no keys. Doing a get operation with all fields');\r\n        return this.extractAllFields();\r\n    }\r\n\r\n    public extractFields(fields: string[]): FieldValues | null{\r\n        if (!fields || !fields.length) {\r\n            return null;\r\n        }\r\n        const data: FieldValues = {};\r\n        fields.forEach(f => {\r\n            data[f] = this.getFieldValue(f);\r\n        });\r\n\r\n        return data;\r\n    }\r\n    /**\r\n     * reset the messages. typically called when user dismisses them, or before a server-request is made\r\n     */\r\n    public resetMessages() {\r\n        this.errors = [];\r\n        this.warnings = [];\r\n        this.info = [];\r\n    }\r\n\r\n    /**\r\n     * messages are set to this model, from where the \r\n     * html component can pick it up for rendering\r\n     * @param messages \r\n     */\r\n    public setMessages(messages: Message[]) {\r\n        this.resetMessages();\r\n        if (messages && messages.forEach) {\r\n            messages.forEach(msg => {\r\n                switch (msg.type) {\r\n                    case \"error\":\r\n                        this.errors.push(msg.text);\r\n                        break;\r\n                    case \"warning\":\r\n                        this.warnings.push(msg.text);\r\n                        break;\r\n                    default:\r\n                        this.info.push(msg.text);\r\n                        break;\r\n                }\r\n            });\r\n        } else {\r\n            console.error('Error messages received from server', messages);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * invoke a specific service with your own pay load, and receive data into this form data\r\n     * @param serviceName service name. \r\n     * @param data input expected by the service\r\n     */\r\n    public callService(serviceName: string, data: FieldValues) {\r\n        this.waitingForServerResponse = true;\r\n        this.resetMessages();\r\n        return this.serverAgent.serve(serviceName, { data: data, asQueryParams: true }, !this.form.serveGuests).pipe(\r\n            map((vo:any) => {\r\n                this.waitingForServerResponse = false;\r\n                this.setAll(vo);\r\n                return vo;\r\n            }),\r\n            catchError(msgs => {\r\n                this.waitingForServerResponse = false;\r\n                this.setMessages(msgs);\r\n                throw msgs;\r\n            })\r\n        );\r\n    }\r\n    /**\r\n    * get data for this entity based on primary or unique key\r\n    * caller has to enaure that either key fields, or unique fields have valid values in the model before making this call\r\n    */\r\n    public fetchData() {\r\n        const serviceName = this.form.getServiceName(Conventions.OP_FETCH);\r\n        if (!serviceName) {\r\n            return throwError(Conventions.OP_FETCH + ' operation not allowed');\r\n        }\r\n\r\n        const data = this.extractKeyFields();\r\n        if (data == null) {\r\n            const msg = 'Key values not found. Fetch request abandoned';\r\n            console.error(msg);\r\n            return throwError(msg);\r\n        }\r\n\r\n        return this.callService(serviceName, data);\r\n    }\r\n\r\n    /**\r\n     * fetch data based the provided input. Use this insted of fetch() if the API \r\n     * requires some data that is not primary key\r\n     * @param data \r\n     */\r\n    public fetchFor(data: FieldValues) {\r\n        const serviceName = this.form.getServiceName(Conventions.OP_FETCH);\r\n        if (!serviceName) {\r\n            return throwError(Conventions.OP_FETCH + ' operation not allowed');\r\n        }\r\n\r\n        return this.callService(serviceName, data);\r\n    }\r\n\r\n    /**\r\n     * get filtered rows from the server. \r\n     * The data received from the server is set to the child-model (PanelData/formData) before returning it to the caller\r\n     * @param child for which data is to be fecthed from the serber\r\n     * @param filters to be applied on the child to get data\r\n     */\r\n    public fetchChildren(child: string, filters: FilterRequest): Observable<Vo[]> {\r\n        const td = this.childTabularData.get(child);\r\n        if (!td) {\r\n            const msg = child + ' is not a tabular child of this panel. operation abandoned';\r\n            console.error(msg);\r\n            return throwError(msg);\r\n        }\r\n        const childForm = this.form.childForms?.get(child)?.form;\r\n        const serviceName = childForm?.getServiceName(Conventions.OP_FILTER);\r\n        if (!serviceName) {\r\n            return throwError(Conventions.OP_FILTER + ' operation not allowed.');\r\n        }\r\n\r\n        this.waitingForServerResponse = true;\r\n        this.resetMessages();\r\n        return this.serverAgent.serve(serviceName, { data: filters }).pipe(\r\n            map((vo:any) => {\r\n                const data = vo['list'] as Vo[];\r\n                td.setAll(data);\r\n                this.waitingForServerResponse = false;\r\n                return data;\r\n            }),\r\n            catchError(msgs => {\r\n                this.waitingForServerResponse = false;\r\n                this.setMessages(msgs);\r\n                throw msgs;\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * filter rows for this form and return raw-rows. \r\n     * Note that the returned data is NOT set to any model before returning it the caller\r\n     */\r\n    public filter(filters?: FilterRequest): Observable<Vo[]> {\r\n        const serviceName = this.form.getServiceName(Conventions.OP_FILTER);\r\n        if (!serviceName) {\r\n            return throwError(Conventions.OP_FILTER + ' operation is not allowed.');\r\n        }\r\n        const payload = filters ? { data: filters } : {};\r\n        this.resetMessages();\r\n        this.waitingForServerResponse = false;\r\n        return this.serverAgent.serve(serviceName, payload).pipe(\r\n            map((vo:any) => {\r\n                this.waitingForServerResponse = false;\r\n                return vo['list'] as Vo[];\r\n            }),\r\n            catchError(msgs => {\r\n                console.error('catching error in filters fd', msgs)\r\n                this.waitingForServerResponse = false;\r\n                this.setMessages(msgs);\r\n                throw msgs;\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * filter rows for this form and return raw-rows. \r\n     * Note that the returned data is NOT set to any model before returning it the caller\r\n     */\r\n    public bulkUpdate(data: Vo[]): Observable<boolean> {\r\n        const serviceName = this.form.getServiceName(Conventions.OP_BULK);\r\n        if (!serviceName) {\r\n            return throwError(Conventions.OP_BULK + ' operation is not allowed.');\r\n        }\r\n        this.resetMessages();\r\n        this.waitingForServerResponse = true;\r\n\r\n        return this.serverAgent.serve(serviceName, { data: { list: data } }).pipe(\r\n            map(_vo => {\r\n                this.waitingForServerResponse = false;\r\n                return true;\r\n            }),\r\n            catchError(msgs => {\r\n                this.waitingForServerResponse = false;\r\n                this.setMessages(msgs);\r\n                throw msgs;\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * validate all editable fields in this form\r\n     */\r\n    public validateForm(): boolean {\r\n        this.formGroup.updateValueAndValidity();\r\n        let ok = this.formGroup.valid;\r\n        if (!ok) {\r\n            console.error('Form ' + this.form.getName() + ' validation failed. Fields in error:', this.getFieldsInError());\r\n        }\r\n\r\n        this.childData.forEach((fd) => {\r\n            const b = fd.validateForm();\r\n            ok = ok && b;\r\n        });\r\n        this.childTabularData.forEach((table) => {\r\n            const b = table.validateForm();\r\n            ok = ok && b;\r\n        });\r\n        return ok;\r\n    }\r\n\r\n    /**\r\n     * get list of invalid fields in this form.\r\n     * if a child is in error, this does not get the actualfield in the child, but return child itsemf as a field\r\n     */\r\n    public getFieldsInError(): string[] {\r\n        const result: string[] = [];\r\n        if (this.formGroup.valid) {\r\n            return result;\r\n        }\r\n        Object.keys(this.formGroup.controls).forEach((key: string) => {\r\n            const cntr = this.formGroup.controls[key];\r\n            if (cntr.invalid) {\r\n                result.push(key);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    /**\r\n     * should we convert this to a promise? Or should we have some standard way of handling error and success?\r\n     */\r\n    public saveAsNew(): Observable<Vo> {\r\n        const serviceName = this.form.getServiceName(Conventions.OP_NEW);\r\n        if (!serviceName) {\r\n            return throwError(Conventions.OP_NEW + ' operation is not allowed.');\r\n        }\r\n\r\n        if (!this.validateForm()) {\r\n            //we have to ensure that the field in error is brought to focus!!\r\n            return throwError('One or more fields are in error. Please edit them and re-submit');\r\n        }\r\n        const data = this.extractAll();\r\n        this.waitingForServerResponse = true;\r\n        this.resetMessages();\r\n        return this.serverAgent.serve(serviceName, { data: data }, !this.form.serveGuests).pipe(\r\n            map(vo => {\r\n                this.waitingForServerResponse = false;\r\n                return vo;\r\n            }),\r\n            catchError(msgs => {\r\n                this.setErrorFields(msgs)\r\n                this.waitingForServerResponse = false;\r\n                this.setMessages(msgs);\r\n                console.error(msgs);\r\n                throw new Error(\"Server returned with errors \");\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param msgs fields in error sent by the server\r\n     * Manually setting error state to the fields sent by the server\r\n     */\r\n    public setErrorFields(msgs: any[]) {\r\n        msgs.forEach(element => {\r\n            this.formGroup.get(element.fieldName)?.setErrors({ 'Invalid': true });\r\n            this.formGroup.markAllAsTouched();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * update operation. WHat do we do after successful operation?\r\n     */\r\n    public save() : Observable<Vo> {\r\n        const serviceName = this.form.getServiceName(Conventions.OP_UPDATE);\r\n        if (!serviceName) {\r\n            return throwError(Conventions.OP_UPDATE + ' operation is not allowed.');\r\n        }\r\n\r\n        if (!this.validateForm()) {\r\n            //we have to ensure that the field in error is brought to focus!!\r\n            return throwError('Fileds that have errors :' + this.getFieldsInError().join(','));\r\n        }\r\n        const data = this.extractAll();\r\n        this.waitingForServerResponse = true;\r\n        this.resetMessages();\r\n        return this.serverAgent.serve(serviceName, { data: data }, !this.form.serveGuests).pipe(\r\n            map(vo => {\r\n                this.waitingForServerResponse = false;\r\n                //we do not set back values in updaetmode\r\n                return vo;\r\n            }),\r\n            catchError(msgs => {\r\n                this.waitingForServerResponse = false;\r\n                this.setMessages(msgs);\r\n                throw msgs;\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * delete this entity\r\n     */\r\n    public delete(): Observable<Vo> {\r\n        const serviceName = this.form.getServiceName(Conventions.OP_DELETE);\r\n        if (!serviceName) {\r\n            return throwError(Conventions.OP_DELETE + ' operation is not allowed.');\r\n        }\r\n\r\n        const data = this.extractKeyFields();\r\n        this.waitingForServerResponse = true;\r\n        this.resetMessages();\r\n        return this.serverAgent.serve(serviceName, { data: data, asQueryParams: false }).pipe(\r\n            map(vo => {\r\n                this.waitingForServerResponse = false;\r\n                //we do not set back values into fd\r\n                return vo;\r\n            }),\r\n            catchError(msgs => {\r\n                this.waitingForServerResponse = false;\r\n                this.setMessages(msgs);\r\n                throw msgs;\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param voArray ~ array of Vo \r\n     * @param form ~ form of the fd\r\n     * @param sa ~ ServerAgent\r\n     * @returns vo as an array of FD \r\n     * Generally used in bulk update operations\r\n     */\r\n    public toFdArray(voArray: Vo[], form: any, sa: ServiceAgent) {\r\n        let fdArray: FormData[] = [];\r\n        voArray.forEach(vo => {\r\n            const fd = form.newFormData(sa);\r\n            fd.setAll(vo);\r\n            fdArray.push(fd);\r\n        });\r\n        return fdArray;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @param fdArray ~ Array of FormData to be converted to\r\n     * @returns an array of vo \r\n     * Generally used in bulk update operations\r\n     */\r\n    public toVoArray(fdArray: FormData[]) {\r\n        let voArray: Vo[] = [];\r\n        fdArray.forEach(fd => {\r\n            voArray.push(fd.extractAll());\r\n        })\r\n        return voArray;\r\n    }\r\n}\r\n/**\r\n * represents the data contained in a form. Manages two-way binding with input fields in the form\r\n */\r\nexport class FormData extends PanelData {\r\n\t/**\r\n\t * list of options/values for all drop-downs in this form. \r\n     * html components should bind the drop-downs to a member in this \r\n\t */\r\n    lists: { [key: string]: SelectOption[] } = {};\r\n\r\n    constructor(f: Form, sa: ServiceAgent) {\r\n        super(f, sa);\r\n        this.hasFg = true;\r\n        const ctrls = this.form.controls;\r\n        if(this.form.fields) {\r\n            this.form.fields.forEach((field, key) => {\r\n                const ctrl = ctrls?.get(key) || [];\r\n                const fc = new FormControl(field.defaultValue, ctrl);\r\n                this.formGroup.addControl(key, fc);\r\n            });\r\n        }\r\n\r\n        this.handleDropDowns(f);\r\n    }\r\n\r\n    public setAList(name: string, list: SelectOption[]): void {\r\n        const field = this.formGroup.get(name);\r\n        if (!field) {\r\n            console.error(name + ' is not a field but a drop-down is being set to it');\r\n            return;\r\n        }\r\n        this.lists[name] = list;\r\n        if (!field.value) {\r\n            let value: any = '';\r\n            if (list && list[0]) {\r\n                value = list[0].value;\r\n            }\r\n            if (value) {\r\n                field.setValue(value);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n\t * set drop-down list of values for a field. \r\n\t * it may be available locally, or we my have to get it from the server\r\n\t * @param field for which drop-down list id to be fetched\r\n     * @param key value of the key field,if this is a keyed-list\r\n\t */\r\n    public setListValues(field: Field, key: string): void {\r\n        if (field.listKey && !key) {\r\n            this.setAList(field.name, []);\r\n            return;\r\n        }\r\n        if (field.keyedList) {\r\n            /*\r\n             * design-time list. locally avaliable\r\n             */\r\n            let arr = field.keyedList[key];\r\n            if (!arr) {\r\n                console.error('Design time list of values for drop-down not available for key=' + key);\r\n                arr = [];\r\n            }\r\n            this.setAList(field.name, arr);\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * we have to ask the server to get this\r\n         */\r\n        let data: any;\r\n        if (field.listKey) {\r\n            data = { list: field.listName, key: key };\r\n        } else {\r\n            data = { list: field.listName };\r\n        }\r\n\r\n        const obs = this.serverAgent.serve(Conventions.SERVICE_LIST, { data: data });\r\n        obs.subscribe((vo:any) => {\r\n            const arr = vo['list'] as SelectOption[];\r\n            if (arr) {\r\n                this.setAList(field.name, arr);\r\n            } else {\r\n                console.error('Server returned a respnse with no list in it. Drop downwill not work for field ' + field.name)\r\n            }\r\n        }, (msgs:any) => {\r\n            console.error('Error while receiving list values for field ' + field.name + JSON.stringify(msgs));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param f form for which we are handling drop-downs.\r\n     */\r\n    private handleDropDowns(f: Form): void | null {\r\n        if (!f.listFields) {\r\n            return null;\r\n        }\r\n        this.lists = {};\r\n        f.listFields.forEach(nam => {\r\n            const field = f.fields?.get(nam);\r\n            if (field?.valueList) {\r\n                this.setAList(nam, field.valueList);\r\n            } else {\r\n                this.setAList(nam, []);\r\n                if (field?.listKey) {\r\n                    const fc = this.formGroup.get(field.listKey) as FormControl;\r\n                    if (!fc) {\r\n                        console.error(\"Unable to find form control named \" + field.listKey + \" drop down for field \" + field.name + \" will not work properly\");\r\n                    } else {\r\n                        const val = fc.value;\r\n                        if (val) {\r\n                            this.setListValues(field, val);\r\n                        }\r\n                        fc.valueChanges.subscribe((value: string) => this.setListValues(field, value));\r\n                    }\r\n                } else if(field){\r\n                    //fixed list, but we have to get it from server at run time\r\n                    this.setListValues(field, '');\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * validate all editable fields in this form\r\n     */\r\n    public override validateForm(): boolean {\r\n        this.formGroup.updateValueAndValidity();\r\n        if (!this.formGroup.valid) {\r\n            this.formGroup.setErrors({ 'err': 'Please enter a valid value' });\r\n            this.formGroup.markAllAsTouched();\r\n            return false;\r\n        }\r\n\r\n        const vals = this.form.validations;\r\n        let allOk = true;\r\n        if (vals) {\r\n            for (const v of vals) {\r\n                /**\r\n                 * n is name, f is field, c is cntrol and v is value\r\n                 */\r\n                const n1 = v['f1'];\r\n                const n2 = v['f2'];\r\n                const f1 = this.form.fields?.get(n1);\r\n                const f2 = this.form.fields?.get(n2);\r\n                const v1 = this.getFieldValue(n1);\r\n                const v2 = this.getFieldValue(n2);\r\n                const c1 = this.formGroup.get(n1);\r\n                const c2 = this.formGroup.get(n2);\r\n\r\n                let isDateType = false;\r\n                if (f1 && f2 && f1.valueType == Conventions.TYPE_DATE && f2.valueType == Conventions.TYPE_DATE) {\r\n                    isDateType = true;\r\n                }\r\n                const valType = v['type'];\r\n                let ok: boolean;\r\n                if (valType === 'range') {\r\n                    ok = this.validateRange(v1, v2, v['isStrict'], isDateType);\r\n                } else if (valType === 'incl') {\r\n                    ok = this.validateInclPair(v1, v2, v['value']);\r\n                } else if (valType === 'excl') {\r\n                    ok = this.validateExclPair(v1, v2, v['atLeastOne']);\r\n                } else {\r\n                    console.error('Form validation type ' + valType + ' is not valid. validation ignored');\r\n                    ok = true;\r\n                }\r\n                if (!ok) {\r\n                    console.error('Inter field validation failed');\r\n                    const err = { interfield: valType, errorId: v['errorId'] };\r\n                    if (c1 && f1?.controlType != 'Hidden' && f1?.controlType != 'Output') {\r\n                        c1.setErrors(err);\r\n                    }\r\n                    if (c2 && f2?.controlType != 'Hidden' && f2?.controlType != 'Output') {\r\n                        c2.setErrors(err);\r\n                    }\r\n                    allOk = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!allOk) {\r\n            console.error('Inter-field validaiton failed');\r\n            return false;\r\n        }\r\n\r\n        this.childData.forEach((fd, key) => {\r\n            const b = fd.validateForm();\r\n            if (!b) {\r\n                console.error('Child validation failed');\r\n            }\r\n            allOk = allOk && b;\r\n        });\r\n        this.childTabularData.forEach((table, key) => {\r\n            const b = table.validateForm();\r\n            if (!b) {\r\n                console.error('Child Table validation failed');\r\n            }\r\n            allOk = allOk && b;\r\n        });\r\n        return allOk;\r\n    }\r\n\t/**\r\n\t * check if v1 to v2 us a range\r\n\t * @param v1 \r\n\t * @param v2 \r\n\t * @param useStrict if true, v2 must be > v2, v1 == v2 woudn't cut\r\n\t */\r\n    private validateRange(v1: any, v2: any, equalOk: boolean, dateType: boolean): boolean {\r\n        if (dateType) {\r\n            console.error('Date comparison not yet implementd. returning true');\r\n            return true;\r\n        }\r\n        const n1 = v1;\r\n        const n2 = v2;\r\n        if (isNaN(n1) || isNaN(n2)|| n2 > n1) {\r\n            return true;\r\n        }\r\n        if (n1 > n2) {\r\n            return false;\r\n        }\r\n        //equal. is it ok?\r\n        return equalOk;\r\n    }\r\n\r\n\t/**\r\n\t * two fields have to be both specified or both skipped.\r\n\t * if value is specified, it means that the rule is applicable if v1 == value\r\n\t * @param v1 \r\n\t * @param v2 \r\n\t * @param value \r\n\t */\r\n    private validateInclPair(v1: string | number | boolean, v2: string | number | boolean, value: any): boolean {\r\n\t\t/*\r\n\t\t * we assume v1 is specified when a value is given. \r\n\t\t * However, if value is specified, then it has to match it' \r\n\t\t */\r\n        const v1Specified = v1 && (!value || value == v1);\r\n        if (v1Specified) {\r\n            if (v2) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        // v1 is not specified, so v2 should not be specified\r\n        if (v2) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\t/**\r\n\t * \r\n\t * @param errorId v1 and v2 are exclusive\r\n\t * @param primaryField \r\n\t * @param otherField \r\n\t * @param atLeastOne if true, exactly one of teh twoto be specified\r\n\t */\r\n    private validateExclPair(v1: string | number | boolean, v2: string | number | boolean, noneOk: boolean): boolean {\r\n        if (v1) {\r\n            if (v2) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        if (v2) {\r\n            return true;\r\n        }\r\n        //none specifield, is it ok?\r\n        return noneOk;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param fieldName name of the drop-down field\r\n     * @returns the displayed value (not the internal value) of this field\r\n     */\r\n    public getDisplayedValueOf(fieldName: string): string {\r\n        const list = this.lists[fieldName];\r\n        if (!list) {\r\n            return '';\r\n        }\r\n        const val = this.getFieldValue(fieldName);\r\n        if (!val) {\r\n            return '';\r\n        }\r\n        const n = list.length;\r\n        for (let i = 0; i < n; i++) {\r\n            const sel = list[i];\r\n            if (sel.value == val) {\r\n                return sel.text;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * represents an array of panel data or form data\r\n */\r\nexport class TabularData {\r\n    public childData: Array<PanelData | FormData> = [];\r\n    constructor(public readonly form: Form, private serverAgent: ServiceAgent, public readonly isEditable: boolean) {\r\n    }\r\n\r\n    /**\r\n     * set data to this panel\r\n     * @param data \r\n     */\r\n    setAll(data: Vo[]): void {\r\n        this.childData.length = 0;\r\n        data.forEach(vo => {\r\n            let fd: PanelData | FormData;\r\n            if (this.isEditable) {\r\n                fd = new FormData(this.form, this.serverAgent);\r\n            } else {\r\n                fd = new PanelData(this.form, this.serverAgent)\r\n            }\r\n            fd.setAll(vo);\r\n            this.childData.push(fd);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * extract data from each of the child-panel into an array\r\n     */\r\n    extractAll(): Vo[] {\r\n        const data: Vo[] = [];\r\n        this.childData.forEach(fd => data.push(fd.extractAll()));\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * validate all the forms\r\n     * @returns true if all ok. false if any one form-control is in error, or any custom-validaiton fails\r\n     */\r\n    validateForm(): boolean {\r\n        let allOk = true;\r\n        this.childData.forEach(fd => {\r\n            const ok = fd.validateForm();\r\n            allOk = allOk && ok;\r\n        });\r\n        return allOk;\r\n    }\r\n\r\n    /**\r\n     * append a default data model to this array\r\n     */\r\n    appendRow(): PanelData | FormData {\r\n        let fd: PanelData | FormData;\r\n        if (this.isEditable) {\r\n            fd = new FormData(this.form, this.serverAgent);\r\n        } else {\r\n            fd = new PanelData(this.form, this.serverAgent);\r\n        }\r\n        this.childData.push(fd);\r\n        return fd;\r\n    }\r\n    /**\r\n      * append a default data model to this array\r\n      */\r\n    removeRow(idx: number) {\r\n        this.childData.splice(idx);\r\n    }\r\n\r\n}","import { FormData, PanelData } from './formData';\r\nimport { ValidatorFn } from '@angular/forms';\r\nimport { SelectOption } from './types';\r\nimport { ServiceAgent } from './serviceAgent';\r\n\r\n/**\r\n * represents the data model, both structure and run-time data\r\n */\r\nexport class Form {\r\n\t/**\r\n\t * key-Field pairs. has all the fields of this form\r\n\t */\r\n\tpublic fields: Map<string, Field> | undefined;\r\n\t/**\r\n\t * key-Table pairs. has all the tables (sub-forms) in this form\r\n\t */\r\n\tpublic childForms: Map<string, ChildForm> | undefined;\r\n\r\n\t/**\r\n\t * meta-data for all controls that can be used to create a formGroup using formBuilder.group()\r\n\t */\r\n\tpublic controls: Map<string, ValidatorFn[]> | undefined;\r\n\r\n\t/**\r\n\t * inter-field validations\r\n\t */\r\n\tpublic validations: Array<{ [key: string]: any }> | undefined;\r\n\r\n\t/**\r\n\t * field names that have enumeratedlist of values. That is,fields that are to be rendered as drop-downs\r\n\t */\r\n\tpublic listFields: string[] | undefined;\r\n\r\n\t/**\r\n\t * fields that make up the primary key. generally onl one, but possible to have more than one\r\n\t */\r\n\tpublic keyFields: string[] | undefined;\r\n\r\n\t/**\r\n\t * what operations are allowed on this form.\r\n\t */\r\n\tpublic opsAllowed: { [key: string]: boolean } = {};\r\n\r\n\t/**\r\n\t * for operations are offered to guests/unauthenticated/non-logged-in users?\r\n\t */\r\n\tpublic serveGuests = false;\r\n\r\n\t/**\r\n\t * name of this form. \r\n\t */\r\n\tpublic getName(): any {\r\n\t// name of this form\r\n\t};\r\n\r\n\t/**\r\n\t * create a model (data-holder) for this form\r\n\t * @param serverAgent is injectable \r\n\t */\r\n\tpublic newFormData(serverAgent: ServiceAgent): FormData {\r\n\t\treturn new FormData(this, serverAgent);\r\n\t}\r\n\r\n\t/**\r\n\t * create a model (data-holder) for this form\r\n\t * @param serverAgent is injectable \r\n\t */\r\n\tpublic newPanelData(serverAgent: ServiceAgent): PanelData {\r\n\t\treturn new PanelData(this, serverAgent);\r\n\t}\r\n\t/**\r\n\t * \r\n\t * @param operation \r\n\t * @returns service name of the form \"operation-formName\", say filter-costomer\r\n\t */\r\n\tpublic getServiceName(operation: string): string | null {\r\n\t\tif (this.opAllowed(operation)) {\r\n\t\t\treturn operation + '_' + this.getName();\r\n\t\t}\r\n\t\tconsole.error('Operation ' + operation + ' not allowed on form ' + this.getName());\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t * @param operation \r\n\t * @returns true of this operation is designed for this form\r\n\t */\r\n\tpublic opAllowed(operation: string): boolean {\r\n\t\tif (this.opsAllowed && this.opsAllowed[operation]) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tconsole.error('Form ', this.getName(), ' is not designed for ', operation, ' operation');\r\n\t\treturn false;\r\n\t}\r\n\t\r\n}\r\n\r\nexport interface ChildForm {\r\n\tname: string;\r\n\tform: Form;\r\n\tisTabular: boolean;\r\n\r\n\tlabel?: string;\r\n\tminRows?: number;\r\n\tmaxRows?: number;\r\n\terrorId?: string;\r\n\tisEditable?: boolean;\r\n}\r\n\r\nexport interface Field {\r\n\t/** \r\n\t * required attributes\r\n\t */\r\n\tname: string;\r\n\tlabel: string;\r\n\t/**\r\n\t * 0-text, 1-integer, 2-decimal, 3-boolean, 4-date, 5-timestamp\r\n\t */\r\n\tvalueType: 0 | 1 | 2 | 3 | 4 | 5;\r\n\r\n\t/**\r\n\t * optional attributes\r\n\t */\r\n\tdefaultValue?: string | number | boolean;\r\n\taltLabel?: string;\r\n\tplaceHolder?: string;\r\n\ttrueLabel?: string;\r\n\tfalseLabel?: string;\r\n\tisEditable?: boolean;\r\n\terrorId?: string;\r\n\tisRequired?: boolean;\r\n\tminLength?: number;\r\n\tmaxLength?: number;\r\n\tregex?: string;\r\n\tminValue?: number;\r\n\tmaxValue?: number;\r\n\tnbrFractions?: number;\r\n\tnbrDecimals?: number;\r\n\tlistName?: string;\r\n\tlistKey?: string;\r\n\tvalueList?: SelectOption[];\r\n\tkeyedList?: { [key: string]: SelectOption[] };\r\n\tcontrolType?: \"Hidden\" | \"Input\" | \"Dropdown\" | \"Output\" | \"Checkbox\" | \"Password\" | \"Textarea\" | \"Button\";\r\n\tdisabled?: boolean;\r\n\thint?: string;\r\n\tmultipleSelect?: boolean;\r\n\ticon?: string;\r\n\tsuffix?: string;\r\n\tprefix?: string;\r\n\tbuttonType?: string;\r\n\r\n}\r\n\r\n","import {\n\tHttpClient,\n\tHttpParams,\n\tHttpResponse\n} from '@angular/common/http';\nimport {\n\tInjectable\n} from '@angular/core';\nimport {\n\tClientConfig\n} from './clientConfig';\nimport {\n\tConventions\n} from './conventions';\nimport {\n\tVo,\n\tServerResponse,\n\tFilterRequest\n} from './types';\nimport {\n  throwError,\n  Observable\n} from 'rxjs';\nimport {\nClientContext\n} from './clientContext';\nimport {\n\tForm\n} from './form';\nimport {\n\tcatchError,\n\tmap\n} from 'rxjs/operators';\n\n@Injectable({\n\tprovidedIn: 'root'\n})\n/**\n * A wrapper on HttpClient to take care of our protocols\n * Draws heavily on Observables. If you are tounderstand/maintain this code,  you MUST be thorough with the Observables\n */\nexport class ServiceAgent {\n\tconstructor(private http: HttpClient, private config: ClientConfig, private ctx: ClientContext) {}\n\n\t/**\n\t * serve this service. we use a strict service oriented architecture, \n\t * where in the only thing the client can ask the server is to serve a service.\n\t * There is no concept of resources or operations. Any such concepts are to be \n\t * implemented using the service paradigm. \n\t * @param serviceName  name of the service to be requested\n\t * @param data input data for the request\n\t * @param asQueryParams true if the data is just a set of name-string params, and the srver expects them in query string\n\t * @param headers any special headers to be communicated. Typically for additional authentication.\n\t * @param withAuth true if the request is to be sent with auth. If auth is not present, this wil trigger a login\n\t */\n\tpublic serve(serviceName: string,\n\t\toptions: {\n\t\t\tdata ? : Vo | FilterRequest | null ,\n\t\t\tasQueryParams ? : boolean,\n\t\t\theaders ? : {\n\t\t\t\t[key: string]: string\n\t\t\t}\n\t\t} = {},\n\t\twithAuth: boolean = true):(Observable < Vo >) {\n\n\t\tconst token = this.ctx.getToken();\n\t\tif (withAuth && !token) {\n\t\t\t//not logged-in.To be re-tried after  a successful login\n\t\t\treturn this.notLoggedIn({\n\t\t\t\tserviceName: serviceName,\n\t\t\t\toptions: options,\n\t\t\t\twithAuth: withAuth\n\t\t\t});\n\t\t}\n\t\tconst headers = options.headers || {};\n\t\theaders[Conventions.HEADER_SERVICE] = serviceName;\n\t\tif (withAuth) {\n\t\t\theaders[Conventions.HEADER_AUTH] = token;\n\t\t}\n\t\tlet data = options.data || null;\n\t\tlet params;\n\t\tif (data && options.asQueryParams) {\n\t\t\tparams = this.toParams(data);\n\t\t}\n\t\tconst obs = this.http.post <ServerResponse>(this.config.url, data, {\n\t\t\tobserve: \"response\",\n\t\t\theaders: headers,\n\t\t\tparams: params\n\t\t});\n\t\treturn obs.pipe(map((resp:HttpResponse<ServerResponse>) => {\n\t\t\tif (!resp.ok) {\n\t\t\t\tconst msg = 'Server Error. http-status :' + resp.status + '=' + resp.statusText + (resp.body ? 'Response: ' + JSON.stringify(resp.body) : '');\n\t\t\t\tconsole.error(msg);\n\t\t\t\tthrow {\n\t\t\t\t\ttype: 'error',\n\t\t\t\t\tid: 'serverError',\n\t\t\t\t\ttext: msg\n\t\t\t\t};\n\t\t\t}\n\t\t\t//no-news is good-news!!\n\t\t\tif (!resp.body) {\n\t\t\t\treturn {};\n\t\t\t}\n\t\t\n\t\t\tconst {\n\t\t\t\tmessages,\n\t\t\t\tallOk,\n\t\t\t\tdata,\n\t\t\t\ttoken\n\t\t\t} = resp.body;\n\t\t\tif (allOk) {\n\t\t\t\tif (token) {\n\t\t\t\t\tthis.ctx.setToken(token);\n\t\t\t\t}\n\t\t\t\tif (messages) {\n\t\t\t\t\tif (messages[0].type == 'info') {\n\t\t\t\t\t\tthrow messages;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn data as Vo;\n\t\t\t}\n\n\t\t\tif (messages) {\n\t\t\t\tconsole.error('Server returned with errors :', messages);\n\t\t\t\tthrow messages;\n\t\t\t}\n\t\t\tconst msg = 'Server Error. server reported a failure, but did not return any error message';\n\t\t\tconsole.error(msg);\n\t\t\tthrow [{\n\t\t\t\ttype: 'error',\n\t\t\t\tid: 'serverError',\n\t\t\t\ttext: msg\n\t\t\t}];\n\t\t}));\n\t}\n\t/**\n\t * filter rows for a form and return raw-rows. \n\t * Note that the returned data is NOT set to any model before returning it the caller\n\t */\n\tpublic filter(form: Form, filters: FilterRequest): Observable < Vo[] > {\n\t\tconst serviceName = form.getServiceName(Conventions.OP_FILTER);\n\t\tif (!serviceName) {\n\t\t\treturn throwError(Conventions.OP_FILTER + ' operation is not allowed.');\n\t\t}\n\n\t\tconst obs = this.serve(serviceName, {\n\t\t\tdata: filters\n\t\t});\n\t\treturn obs.pipe(\n\t\t\tmap((vo:any) => {\n\t\t\t\treturn vo['list'] as Vo[];\n\t\t\t}),\n\t\t\tcatchError(msgs => {\n\t\t\t\tconsole.error('catching in sa')\n\t\t\t\tthrow msgs;\n\t\t\t})\n\t\t);\n\t}\n\t/**\n\t * \n\t * @param call parameters for serve that was interrupted.\n\t * We have to design a way to return an observable that works after a successful login.\n\t */\n\tprivate notLoggedIn(params: any): Observable < Vo > {\n\t\t/**\n\t\t * what we want to do is:\n\t\t * 1. show a modal panel and accept credentials.\n\t\t * 2. call login service with these credentials.\n\t\t * 3. on successful login, make this service request again.\n\t\t * Logic would be quite tricky becaue we have t0 return an observable right now that triggers all these..\n\t\t ^ for te time being, we just throw-up our hands!!!\n\t\t */\n\t\tconst msg = 'Sorry you are not logged in. Please try again after logging in';\n\t\treturn new Observable((observer:any) => {\n\t\t\tconst {\n\t\t\t\terror\n\t\t\t} = observer;\n\t\t\terror('msg');\n\t\t});\n\t}\n\n\tprivate toParams(data: any): HttpParams {\n\t\tlet params = new HttpParams();\n\t\tfor (const a in data) {\n\t\t\tif (data.hasOwnProperty(a)) {\n\t\t\t\tconst val = data[a] || \"\";\n\t\t\t\tparams.set(a, val.toString());\n\t\t\t}\n\t\t}\n\t\treturn params;\n\t}\n\t/**\n\t * initiates a file-down load by the browser with supplied data as content\n\t * @param data  to be downloaded\n\t * @param fileName naem of the file to be downloaded as \n\t */\n\tpublic download(data: any, fileName: string) {\n\t\tconst json = JSON.stringify(data);\n\t\tconst blob = new Blob([json], {\n\t\t\ttype: 'octet/stream'\n\t\t});\n\t\tconst url = window.URL.createObjectURL(blob);\n\t\tconst a = window.document.createElement('a');\n\t\ta.style.display = 'none';\n\t\ta.href = url;\n\t\ta.target = '_blank';\n\t\ta.download = fileName;\n\t\tdocument.body.appendChild(a);\n\t\ta.click();\n\t\tdocument.body.removeChild(a);\n\t}\n}","export interface Message {\r\n\t/**\r\n\t * one of the pre-defined type Message.\r\n\t */\r\n\ttype: \"error\" | \"warning\" | \"info\" | \"success\";\r\n\t/**\r\n\t * unique name assigned to this message in the app\r\n\t */\r\n\tid: string;\r\n\t/**\r\n\t * formatted text in English that is reay to be rendered\r\n\t */\r\n\ttext: string;\r\n\t/**\r\n\t * name of the field (primary one in case more than one field are involved) that is the\r\n\t * cause of this error. null if this is not specific to any field.\r\n\t */\r\n\tfieldName?: string;\r\n\t/**\r\n\t * name of the table/object that the field is part of. null if this not relevant\r\n\t */\r\n\tobjectName?: string;\r\n\t/**\r\n\t * 0-based row number in case the field in error is part of a table.\r\n\t */\r\n\tidx?: number;\r\n\r\n\t/**\r\n\t * run-time parameters that are used to compose this message. This is useful in i18n\r\n\t */\r\n\tparams?: string[];\r\n}\r\n\r\n/**\r\n * Value object represents a general JSON object that we may \r\n * use to pass data back-and-forth between the client ans the server\r\n */\r\nexport interface Vo {\r\n\t[key: string]: string | number | boolean | null | Vo | Vo[] | SelectOption[];\r\n}\r\n\r\n/**\r\n * server responds with a json with specific structure\r\n */\r\nexport interface ServerResponse {\r\n\tallOk?: boolean;\r\n\tmessages?: Array<Message>;\r\n\tdata?: Vo;\r\n\ttoken?:string;\r\n}\r\n\r\nexport interface FieldValues {\r\n\t[key: string]: string | number | boolean | null;\r\n}\r\n\r\nexport interface SelectOption {\r\n\tvalue: string | number;\r\n\ttext: string;\r\n}\r\n\r\nexport interface Condition {\r\n\tcomp: \"=\" | \"!=\" | \"<\" | \"<=\" | \">\" | \">=\" | \"><\" | \"^\" | \"~\";\r\n\tvalue: string | number | boolean;\r\n\ttoValue?: string | number;\r\n}\r\n\r\nexport interface FilterRequest {\r\n\tconditions: { [key: string]: Condition };\r\n\tsort?: { [key: string]: \"asc\" | \"desc\" | \"\" };\r\n\tmaxRows?: number;\r\n}\r\n\r\n/**\r\n * utility to manage ro-to-column and column-to-rows as per our conventintions\r\n */\r\nexport interface RowToColMeta {\r\n    /**\r\n     * columns is an array of objects. each element has meta data for a column.\r\n     * length of this array is teh number of columns to be used.\r\n     * We need to know the keyAttribute that represents th evalue, and the heading to be ised for that column\r\n     * e.g.[{\"id\":1, \"name\":\"Col1\"}, {\"id\":2, \"name\":\"col2\"}]\r\n     */\r\n\tcolumns: object[],\r\n    /**\r\n     * attribute name in the clumn-array that is to be used as key/id for the column\r\n     */\r\n\tkeyAttribute: string,\r\n    /**\r\n     * attribute name in the clumn-array that is to be used as column heading\r\n     */\r\n\theadingAttribute: string,\r\n\r\n    /**\r\n     * if the heading  has two fields, the second one can be used as sub-heading\r\n     */\r\n\tsubHeadingAttribute?: string,\r\n    /**\r\n     * each row in the data has a child-array that has rows to be taransposed.\r\n     * provide the name of the attribute that has this child-array\r\n     */\r\n\tdatarowsAttribute: string,\r\n    /**\r\n     * each row in the child-array has a member that has the key based on which \r\n\t * we decide which column should it be transposed to.\r\n     * provide the name of this attribute. \r\n     */\r\n\trowKeyAttribute: string,\r\n    /**\r\n     * attribute that has the actual value to be set to the column\r\n     */\r\n\trowValueAttribute: string\r\n}\r\n\r\n/**\r\n * meta data required to push data nack from column to rows.\r\n * this is meaniingful only of the cols were created from rows earlier. \r\n */\r\nexport interface ColToRowMeta {\r\n    /**\r\n     * each row in the data has a child-array that has rows to be taransposed.\r\n     * provide the name of the attribute that has this child-array\r\n     */\r\n\tdatarowsAttribute: string,\r\n    /**\r\n     * each row in the child-array has a member that has the key based on which \r\n\t * we decide which column should it be transposed to.\r\n     * provide the name of this attribute. \r\n     */\r\n\trowKeyAttribute: string,\r\n    /**\r\n     * attribute that has the actual value to be set to the column\r\n     */\r\n\trowValueAttribute: string\r\n\r\n}\r\n/**\r\n * transposed column name is PRE + key to ensure that it does not clash with any existing attribute \r\n */\r\nconst PRE = 'c_';\r\n/**\r\n * utility that handles row-to-column for rendering, \r\n * and possibly col back to row to send teh data back to the server\r\n */\r\nexport class Transposer {\r\n\t/**\r\n\t * convert child-rows of each row of data inito its aown attributes as columns\r\n\t * @param rowToColMeta meta data as to what and how to convert data from row into column\r\n\t * @param tableMeta this is for our bt-table to get column headings and names\r\n\t * @param data actual data to be transposed. \r\n\t * Each row in this array will have additional members that will be used by bt-table.\r\n\t * these values can be later pushed back to the child-rows\r\n\t */\r\n\tstatic rowToCol(rowToColMeta: RowToColMeta,\r\n\t\ttableMeta: { names: string[], headings: any },\r\n\t\tdata: object[]): ColToRowMeta {\r\n\t\t/**\r\n\t\t * extract meta data for transposition\r\n\t\t */\r\n\t\trowToColMeta.columns.forEach((row: any) => {\r\n\t\t\tconst key = row[rowToColMeta.keyAttribute];\r\n\t\t\tif(!key){\r\n\t\t\t\tconsole.error('Key not found in a names element with attr ' + rowToColMeta.keyAttribute + '. Element is ', row);\r\n\t\t\t}else{\r\n\t\t\t\tlet heading = row[rowToColMeta.headingAttribute];\r\n\t\t\t\tif(rowToColMeta.subHeadingAttribute){\r\n\t\t\t\t\theading  = heading + '-' + row[rowToColMeta.subHeadingAttribute];\r\n\t\t\t\t}\r\n\t\t\t\tconst colName = PRE + key;\r\n\t\t\t\ttableMeta.names.push(colName);\r\n\t\t\t\ttableMeta.headings[colName] = heading;\r\n\t\t\t\t}\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * got meta-data. now go to each row and add columns to it based on its child-rows\r\n\t\t */\r\n\t\tconst rowAtt = rowToColMeta.datarowsAttribute;\r\n\t\tconst keyAtt = rowToColMeta.rowKeyAttribute;\r\n\t\tconst valAtt = rowToColMeta.rowValueAttribute;\r\n\t\tconst meta = {\r\n\t\t\tdatarowsAttribute: rowAtt,\r\n\t\t\trowKeyAttribute: keyAtt,\r\n\t\t\trowValueAttribute: valAtt\r\n\t\t};\r\n\t\tif (!data || !data.length) {\r\n\t\t\tconsole.log('Input data is empty or has no rows');\r\n\t\t\treturn meta;\r\n\t\t}\r\n\t\t/**\r\n\t\t * for each data row\r\n\t\t */\r\n\t\tdata.forEach((row:any) => {\r\n\t\t\tif (!row) {\r\n\t\t\t\tconsole.log('Row is empty');\r\n\t\t\t} else {\r\n\t\t\t\t/**\r\n\t\t\t\t * for each row meant to be transposed as a column\r\n\t\t\t\t */\r\n\t\t\t\tconst children = row[rowAtt] as [];\r\n\t\t\t\tif (!children) {\r\n\t\t\t\t\tconsole.log('Row does not have array value for tag/attr ' + rowAtt);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tchildren.forEach(child => {\r\n\t\t\t\t\t\tif (child) {\r\n\t\t\t\t\t\t\tconst colName = PRE + child[keyAtt];\r\n\t\t\t\t\t\t\trow[colName] = child[valAtt];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.warn('empty child element found. ignored');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn meta;\r\n\t}\r\n\r\n\t/**\r\n\t * convert column values back to rows in the data rows\r\n\t * @param colToRowMeta meta data that was returned from rowToCol() nethod\r\n\t * @param data data that was passed to rowToCol() method\r\n\t */\r\n\tstatic colToRow(colToRowMeta: ColToRowMeta, data: object[]): void {\r\n\t\tconst rowAtt = colToRowMeta.datarowsAttribute;\r\n\t\tconst keyAtt = colToRowMeta.rowKeyAttribute;\r\n\t\tconst valAtt = colToRowMeta.rowValueAttribute;\r\n\t\tif (!data || !data.length) {\r\n\t\t\tconsole.warn('No data to re-transpose');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t/**\r\n\t\t * for each data row\r\n\t\t */\r\n\t\tdata.forEach((row:any) => {\r\n\t\t\tif (!row) {\r\n\t\t\t\tconsole.log('Data has an empty row');\r\n\t\t\t} else {\r\n\t\t\t\tconst children = row[rowAtt];\r\n\t\t\t\tif (!children || !children.length) {\r\n\t\t\t\t\tconsole.warn('Row has no or empty children with tag/attr ' + rowAtt);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * for each row meant to be transposed as a column\r\n\t\t\t\t\t */\r\n\t\t\t\t\tchildren.forEach((child:any) => {\r\n\t\t\t\t\t\tconst key = child[keyAtt];\r\n\t\t\t\t\t\tchild[valAtt] = row[PRE + key];\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ClientConfig } from './clientConfig';\nimport { ClientContext } from './clientContext';\nimport { Conventions } from './conventions';\nimport { Form } from './form';\nimport { ServiceAgent } from './serviceAgent';\nimport { PanelData, TabularData } from './formData'\nimport { Transposer } from './types';\n\n@NgModule({\n    imports:[\n        CommonModule,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    declarations:[\n        ClientConfig,\n        ClientContext,\n        Conventions,\n        Form,\n        FormData,\n        PanelData,\n        TabularData,\n        ServiceAgent,\n        Transposer\n    ],\n    exports:[\n        ClientConfig,\n        ClientContext,\n        Conventions,\n        Form,\n        FormData,\n        PanelData,\n        TabularData,\n        ServiceAgent,\n        Transposer\n    ]\n})\n\nexport class FormModule {}\n\n","import {\n  Injectable\n} from \"@angular/core\";\nimport {\n  MatSnackBar,\n  MatSnackBarConfig\n} from \"@angular/material/snack-bar\"\n@Injectable()\nexport class MessageService {\n  constructor(private snackBar: MatSnackBar) {}\n\n  showSuccess(message: string) {\n    const config = new MatSnackBarConfig();\n    config.panelClass = ['snackbar-success'];\n    config.duration = 3000;\n    this.snackBar.open(message, undefined, config);\n  }\n  showError(message: string) {\n    const config = new MatSnackBarConfig();\n    config.panelClass = ['snackbar-error'];\n    config.duration = 3000;\n    this.snackBar.open(message, undefined, config);\n  }\n\n  showInfo(message: string) {\n    const config = new MatSnackBarConfig();\n    config.panelClass = ['snackbar-info'];\n    config.duration = 3000;\n    this.snackBar.open(message, undefined, config);\n  }\n  showDetail(message: string) {\n    const config = new MatSnackBarConfig();\n    config.horizontalPosition = 'end';\n    config.verticalPosition = 'bottom';\n    this.snackBar.open(message, undefined, config)\n  }\n  close() {\n    this.snackBar.dismiss();\n  }\n}\n","/*\n * Public API Surface of mv-client-core\n */\n\nexport * from './mv-core/mv-client-core.service';\nexport * from './mv-core/mv-core-app.module';\nexport * from './mv-core/material.module';\nexport * from './mv-core/mv-form-core/form.module';\nexport * from './mv-core/mv-components/mv-components.module';\nexport * from './mv-core/mv-components/mv-textbox/component';\nexport * from './mv-core/mv-form-core/form';\nexport * from './mv-core/mv-form-core/serviceAgent';\nexport * from './mv-core/mv-form-core/formData';\nexport * from './mv-core/mv-form-core/types';\nexport * from './mv-core/mv-form-core/messageService';\nexport * from './mv-core/mv-components/mv-dropdown/component';\nexport * from './mv-core/mv-components/mv-textarea/component';\nexport * from './mv-core/mv-components/mv-form-generator/component';\nexport * from './mv-core/mv-components/mv-datepicker/component';\nexport * from './mv-core/mv-components/mv-checkbox/component';\nexport * from './mv-core/mv-components/mv-primary-button/component';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i3","i4","i5","i2","i3.MvTextboxComponent","i4.MvDropDownComponent","i5.MvTextareaComponent","i1","i6","FormData","i2.ClientConfig","i3.ClientContext"],"mappings":"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"}