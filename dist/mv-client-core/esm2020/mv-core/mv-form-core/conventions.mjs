/**
 * constants/conventions that are used across layers.
 * These are fixed at design time. deployment-time parameters can be found in Config
 */
export class Conventions {
}
/**
 * HTTP headers
 */
Conventions.HEADER_SERVICE = '_s';
Conventions.HEADER_AUTH = 'Authorization';
/**
 * tags or field names in the paylaod back-and-forth
 */
Conventions.TAG_MESSAGES = 'messages';
Conventions.TAG_ALL_OK = 'allOk';
Conventions.TAG_DATA = 'data';
Conventions.TAG_LIST = 'list';
Conventions.TAG_MAX_ROWS = 'maxRows';
Conventions.TAG_CONDITIONS = 'conditions';
Conventions.TAG_FILTER_COMP = 'comp';
Conventions.TAG_FILTER_VALUE = 'value';
Conventions.TAG_FILTER_VALUE_TO = 'toValue';
/**
* special pre-defined service to get drop-down values
*/
Conventions.SERVICE_LIST = 'list';
/*
 * form I/O service prefixes
 */
Conventions.OP_FETCH = 'get';
Conventions.OP_NEW = 'create';
Conventions.OP_UPDATE = 'update';
Conventions.OP_DELETE = 'delete';
Conventions.OP_FILTER = 'filter';
Conventions.OP_BULK = 'bulk';
/*
 * filter operators
 */
Conventions.FILTER_EQ = '=';
Conventions.FILTER_NE = '!=';
Conventions.FILTER_LE = '<=';
Conventions.FILTER_LT = '<';
Conventions.FILTER_GE = '>=';
Conventions.FILTER_GT = '>';
Conventions.FILTER_BETWEEN = '><';
Conventions.FILTER_STARTS_WITH = '^';
Conventions.FILTER_CONTAINS = '~';
/*
 * value types of fields
 */
Conventions.TYPE_TEXT = 0;
Conventions.TYPE_INTEGER = 1;
Conventions.TYPE_DECIMAL = 2;
Conventions.TYPE_BOOLEAN = 3;
Conventions.TYPE_DATE = 4;
Conventions.TYPE_TIMESTAMP = 5;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVudGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tdi1jbGllbnQtY29yZS9zcmMvbXYtY29yZS9tdi1mb3JtLWNvcmUvY29udmVudGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLFdBQVc7O0FBQ3BCOztHQUVHO0FBQ0MsMEJBQWMsR0FBRyxJQUFJLENBQUM7QUFDdEIsdUJBQVcsR0FBRyxlQUFlLENBQUM7QUFFbEM7O0dBRUc7QUFDSSx3QkFBWSxHQUFHLFVBQVUsQ0FBQztBQUM3QixzQkFBVSxHQUFHLE9BQU8sQ0FBQztBQUNyQixvQkFBUSxHQUFHLE1BQU0sQ0FBQztBQUNsQixvQkFBUSxHQUFHLE1BQU0sQ0FBQztBQUNsQix3QkFBWSxHQUFHLFNBQVMsQ0FBQztBQUN6QiwwQkFBYyxHQUFHLFlBQVksQ0FBQztBQUM5QiwyQkFBZSxHQUFHLE1BQU0sQ0FBQztBQUN6Qiw0QkFBZ0IsR0FBRyxPQUFPLENBQUM7QUFDeEIsK0JBQW1CLEdBQUcsU0FBUyxDQUFDO0FBRXRDOztFQUVFO0FBQ1csd0JBQVksR0FBRyxNQUFNLENBQUM7QUFDcEM7O0dBRUE7QUFDTyxvQkFBUSxHQUFHLEtBQUssQ0FBQztBQUNqQixrQkFBTSxHQUFHLFFBQVEsQ0FBQztBQUNsQixxQkFBUyxHQUFHLFFBQVEsQ0FBQztBQUNyQixxQkFBUyxHQUFHLFFBQVEsQ0FBQztBQUNyQixxQkFBUyxHQUFHLFFBQVEsQ0FBQztBQUNyQixtQkFBTyxHQUFHLE1BQU0sQ0FBQztBQUUzQjs7R0FFRztBQUNPLHFCQUFTLEdBQUcsR0FBRyxDQUFDO0FBQ2hCLHFCQUFTLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLHFCQUFTLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLHFCQUFTLEdBQUcsR0FBRyxDQUFDO0FBQ2hCLHFCQUFTLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLHFCQUFTLEdBQUcsR0FBRyxDQUFDO0FBQ2hCLDBCQUFjLEdBQUcsSUFBSSxDQUFDO0FBQ3RCLDhCQUFrQixHQUFHLEdBQUcsQ0FBQztBQUN6QiwyQkFBZSxHQUFHLEdBQUcsQ0FBQztBQUU3Qjs7R0FFRztBQUNJLHFCQUFTLEdBQUcsQ0FBQyxDQUFDO0FBQ2pCLHdCQUFZLEdBQUcsQ0FBQyxDQUFDO0FBQ2pCLHdCQUFZLEdBQUcsQ0FBQyxDQUFDO0FBQ2pCLHdCQUFZLEdBQUcsQ0FBQyxDQUFDO0FBQ2pCLHFCQUFTLEdBQUcsQ0FBQyxDQUFDO0FBQ2QsMEJBQWMsR0FBRyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogY29uc3RhbnRzL2NvbnZlbnRpb25zIHRoYXQgYXJlIHVzZWQgYWNyb3NzIGxheWVycy5cclxuICogVGhlc2UgYXJlIGZpeGVkIGF0IGRlc2lnbiB0aW1lLiBkZXBsb3ltZW50LXRpbWUgcGFyYW1ldGVycyBjYW4gYmUgZm91bmQgaW4gQ29uZmlnXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ29udmVudGlvbnMge1xyXG4gICAgLyoqXHJcbiAgICAgKiBIVFRQIGhlYWRlcnNcclxuICAgICAqL1xyXG5cdHN0YXRpYyBIRUFERVJfU0VSVklDRSA9ICdfcyc7XHJcblx0c3RhdGljIEhFQURFUl9BVVRIID0gJ0F1dGhvcml6YXRpb24nO1xyXG5cdFxyXG4gICAgLyoqXHJcbiAgICAgKiB0YWdzIG9yIGZpZWxkIG5hbWVzIGluIHRoZSBwYXlsYW9kIGJhY2stYW5kLWZvcnRoXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBUQUdfTUVTU0FHRVMgPSAnbWVzc2FnZXMnO1xyXG5cdHN0YXRpYyBUQUdfQUxMX09LID0gJ2FsbE9rJztcclxuXHRzdGF0aWMgVEFHX0RBVEEgPSAnZGF0YSc7XHJcblx0c3RhdGljIFRBR19MSVNUID0gJ2xpc3QnO1xyXG5cdHN0YXRpYyBUQUdfTUFYX1JPV1MgPSAnbWF4Um93cyc7XHJcblx0c3RhdGljIFRBR19DT05ESVRJT05TID0gJ2NvbmRpdGlvbnMnO1xyXG5cdHN0YXRpYyBUQUdfRklMVEVSX0NPTVAgPSAnY29tcCc7XHJcblx0c3RhdGljIFRBR19GSUxURVJfVkFMVUUgPSAndmFsdWUnO1xyXG4gICAgc3RhdGljIFRBR19GSUxURVJfVkFMVUVfVE8gPSAndG9WYWx1ZSc7XHJcbiAgICBcclxuICAgICAvKipcclxuICAgICAqIHNwZWNpYWwgcHJlLWRlZmluZWQgc2VydmljZSB0byBnZXQgZHJvcC1kb3duIHZhbHVlc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIFNFUlZJQ0VfTElTVCA9ICdsaXN0JztcclxuICAgIC8qXHJcblx0ICogZm9ybSBJL08gc2VydmljZSBwcmVmaXhlc1xyXG5cdCAqL1xyXG4gICAgc3RhdGljIE9QX0ZFVENIID0gJ2dldCc7XHJcbiAgICBzdGF0aWMgT1BfTkVXID0gJ2NyZWF0ZSc7XHJcbiAgICBzdGF0aWMgT1BfVVBEQVRFID0gJ3VwZGF0ZSc7XHJcbiAgICBzdGF0aWMgT1BfREVMRVRFID0gJ2RlbGV0ZSc7XHJcbiAgICBzdGF0aWMgT1BfRklMVEVSID0gJ2ZpbHRlcic7XHJcbiAgICBzdGF0aWMgT1BfQlVMSyA9ICdidWxrJztcclxuXHJcblx0LypcclxuXHQgKiBmaWx0ZXIgb3BlcmF0b3JzXHJcblx0ICovXHJcbiAgICBzdGF0aWMgRklMVEVSX0VRID0gJz0nO1xyXG4gICAgc3RhdGljIEZJTFRFUl9ORSA9ICchPSc7XHJcbiAgICBzdGF0aWMgRklMVEVSX0xFID0gJzw9JztcclxuICAgIHN0YXRpYyBGSUxURVJfTFQgPSAnPCc7XHJcbiAgICBzdGF0aWMgRklMVEVSX0dFID0gJz49JztcclxuICAgIHN0YXRpYyBGSUxURVJfR1QgPSAnPic7XHJcbiAgICBzdGF0aWMgRklMVEVSX0JFVFdFRU4gPSAnPjwnO1xyXG4gICAgc3RhdGljIEZJTFRFUl9TVEFSVFNfV0lUSCA9ICdeJztcclxuICAgIHN0YXRpYyBGSUxURVJfQ09OVEFJTlMgPSAnfic7XHJcbiAgICBcclxuICAgIC8qXHJcbiAgICAgKiB2YWx1ZSB0eXBlcyBvZiBmaWVsZHMgXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBUWVBFX1RFWFQgPSAwO1xyXG5cdHN0YXRpYyBUWVBFX0lOVEVHRVIgPSAxO1xyXG5cdHN0YXRpYyBUWVBFX0RFQ0lNQUwgPSAyO1xyXG5cdHN0YXRpYyBUWVBFX0JPT0xFQU4gPSAzO1xyXG5cdHN0YXRpYyBUWVBFX0RBVEUgPSA0O1xyXG5cdHN0YXRpYyBUWVBFX1RJTUVTVEFNUCA9IDU7XHJcbn1cclxuIl19