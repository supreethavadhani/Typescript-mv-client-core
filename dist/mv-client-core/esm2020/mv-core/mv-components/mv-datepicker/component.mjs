import { Component, Input, ViewEncapsulation, Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/core";
import * as i2 from "@angular/common";
import * as i3 from "@angular/material/form-field";
import * as i4 from "@angular/material/input";
import * as i5 from "@angular/material/datepicker";
import * as i6 from "@angular/forms";
export class MvDatePickerComponent {
    constructor(dateAdapter) {
        this.dateAdapter = dateAdapter;
        this.field = {
            label: "",
            name: "",
            valueType: 0,
            errorId: "",
            hint: "",
            isRequired: true,
        };
        this.today = new Date();
        dateAdapter.setLocale('en-in');
    }
    ngOnInit() {
        if (this.formData && this.field) {
            this.formControl = this.formData?.formGroup.get(this.field.name);
            this.formControl.setValue(this.today);
        }
    }
    dateChange(_$event) {
        this.formControl?.setValue((this.formControl?.value).format("YYYY-MM-DD"));
    }
}
MvDatePickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: MvDatePickerComponent, deps: [{ token: i1.DateAdapter }], target: i0.ɵɵFactoryTarget.Component });
MvDatePickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.3", type: MvDatePickerComponent, selector: "app-mv-date", inputs: { field: "field", formData: "formData" }, providers: [], ngImport: i0, template: "<mat-form-field class=\"col-md-12\" appearance=\"fill\">\r\n\t<mat-label>{{field?.label}}<span *ngIf=\"!field?.isRequired\" class=\"optional\">(optional)</span></mat-label>\r\n\t<input matInput [matDatepicker]=\"picker\" [required]=\"field?.isRequired\" [formControl]=formControl\r\n\t\t(dateChange)=\"dateChange($event)\">\r\n\t<mat-datepicker-toggle matSuffix [for]=\"picker\" style=\"outline: none;\"></mat-datepicker-toggle>\r\n\t<mat-datepicker style=\"outline: none;\" #picker></mat-datepicker>\r\n</mat-form-field>", dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.MatFormField, selector: "mat-form-field", inputs: ["color", "appearance", "hideRequiredMarker", "hintLabel", "floatLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i3.MatLabel, selector: "mat-label" }, { kind: "directive", type: i3.MatSuffix, selector: "[matSuffix]" }, { kind: "directive", type: i4.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "component", type: i5.MatDatepicker, selector: "mat-datepicker", exportAs: ["matDatepicker"] }, { kind: "directive", type: i5.MatDatepickerInput, selector: "input[matDatepicker]", inputs: ["matDatepicker", "min", "max", "matDatepickerFilter"], exportAs: ["matDatepickerInput"] }, { kind: "component", type: i5.MatDatepickerToggle, selector: "mat-datepicker-toggle", inputs: ["for", "tabIndex", "aria-label", "disabled", "disableRipple"], exportAs: ["matDatepickerToggle"] }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i6.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] });
MvDatePickerComponent.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: MvDatePickerComponent });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: MvDatePickerComponent, decorators: [{
            type: Injectable
        }, {
            type: Component,
            args: [{ selector: 'app-mv-date', providers: [], encapsulation: ViewEncapsulation.Emulated, template: "<mat-form-field class=\"col-md-12\" appearance=\"fill\">\r\n\t<mat-label>{{field?.label}}<span *ngIf=\"!field?.isRequired\" class=\"optional\">(optional)</span></mat-label>\r\n\t<input matInput [matDatepicker]=\"picker\" [required]=\"field?.isRequired\" [formControl]=formControl\r\n\t\t(dateChange)=\"dateChange($event)\">\r\n\t<mat-datepicker-toggle matSuffix [for]=\"picker\" style=\"outline: none;\"></mat-datepicker-toggle>\r\n\t<mat-datepicker style=\"outline: none;\" #picker></mat-datepicker>\r\n</mat-form-field>" }]
        }], ctorParameters: function () { return [{ type: i1.DateAdapter }]; }, propDecorators: { field: [{
                type: Input
            }], formData: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbXYtY2xpZW50LWNvcmUvc3JjL212LWNvcmUvbXYtY29tcG9uZW50cy9tdi1kYXRlcGlja2VyL2NvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL212LWNsaWVudC1jb3JlL3NyYy9tdi1jb3JlL212LWNvbXBvbmVudHMvbXYtZGF0ZXBpY2tlci9jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxpQkFBaUIsRUFDakIsVUFBVSxFQUVWLE1BQU0sZUFBZSxDQUFDOzs7Ozs7OztBQW9CdkIsTUFBTSxPQUFPLHFCQUFxQjtJQWFqQyxZQUFvQixXQUFpQztRQUFqQyxnQkFBVyxHQUFYLFdBQVcsQ0FBc0I7UUFackMsVUFBSyxHQUF1QjtZQUMzQyxLQUFLLEVBQUMsRUFBRTtZQUNSLElBQUksRUFBQyxFQUFFO1lBQ1AsU0FBUyxFQUFDLENBQUM7WUFDWCxPQUFPLEVBQUMsRUFBRTtZQUNWLElBQUksRUFBQyxFQUFFO1lBQ1AsVUFBVSxFQUFDLElBQUk7U0FDZixDQUFDO1FBSUssVUFBSyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFFekIsV0FBVyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBQ0QsUUFBUTtRQUNQLElBQUcsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQy9CLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFnQixDQUFDO1lBQ2hGLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN0QztJQUNGLENBQUM7SUFFRCxVQUFVLENBQUMsT0FBWTtRQUN0QixJQUFJLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUE7SUFDM0UsQ0FBQzs7a0hBekJXLHFCQUFxQjtzR0FBckIscUJBQXFCLHdGQUh0QixFQUFFLDBCQ3ZCZCwyZ0JBTWlCO3NIRG9CSixxQkFBcUI7MkZBQXJCLHFCQUFxQjtrQkFUakMsVUFBVTs7a0JBRVYsU0FBUzsrQkFDQyxhQUFhLGFBR1osRUFBRSxpQkFDRSxpQkFBaUIsQ0FBQyxRQUFRO2tHQUd6QixLQUFLO3NCQUFwQixLQUFLO2dCQVFVLFFBQVE7c0JBQXZCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG5cdENvbXBvbmVudCxcclxuXHRJbnB1dCxcclxuXHRWaWV3RW5jYXBzdWxhdGlvbixcclxuXHRJbmplY3RhYmxlLFxyXG5cdE9uSW5pdFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1xyXG5cdEZvcm1Db250cm9sXHJcbn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQge1xyXG5cdE5hdGl2ZURhdGVBZGFwdGVyLFxyXG5cdERhdGVBZGFwdGVyXHJcbn0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvY29yZSc7XHJcbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnLi4vLi4vbXYtZm9ybS1jb3JlL2Zvcm0nO1xyXG5pbXBvcnQgeyBGb3JtRGF0YSB9IGZyb20gJy4uLy4uL212LWZvcm0tY29yZS9mb3JtRGF0YSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcblxyXG5AQ29tcG9uZW50KHtcclxuXHRzZWxlY3RvcjogJ2FwcC1tdi1kYXRlJyxcclxuXHR0ZW1wbGF0ZVVybDogJy4vY29tcG9uZW50Lmh0bWwnLFxyXG5cdHN0eWxlVXJsczogW10sXHJcblx0cHJvdmlkZXJzOiBbXSxcclxuXHRlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5FbXVsYXRlZCxcclxufSlcclxuZXhwb3J0IGNsYXNzIE12RGF0ZVBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblx0QElucHV0KCkgcHVibGljIGZpZWxkOiBGaWVsZCAgfCB1bmRlZmluZWQgPSB7XHJcblx0XHRsYWJlbDpcIlwiLFxyXG5cdFx0bmFtZTpcIlwiLFxyXG5cdFx0dmFsdWVUeXBlOjAsXHJcblx0XHRlcnJvcklkOlwiXCIsXHJcblx0XHRoaW50OlwiXCIsXHJcblx0XHRpc1JlcXVpcmVkOnRydWUsXHJcblx0fTtcclxuXHRASW5wdXQoKSBwdWJsaWMgZm9ybURhdGE6IEZvcm1EYXRhIHwgdW5kZWZpbmVkO1xyXG5cclxuXHRwdWJsaWMgZm9ybUNvbnRyb2w6IEZvcm1Db250cm9sIHwgdW5kZWZpbmVkO1xyXG5cdHB1YmxpYyB0b2RheSA9IG5ldyBEYXRlKCk7XHJcblx0Y29uc3RydWN0b3IocHJpdmF0ZSBkYXRlQWRhcHRlcjogRGF0ZUFkYXB0ZXIgPCBEYXRlID4gKSB7XHJcblx0XHRkYXRlQWRhcHRlci5zZXRMb2NhbGUoJ2VuLWluJyk7XHJcblx0fVxyXG5cdG5nT25Jbml0KCkge1xyXG5cdFx0aWYodGhpcy5mb3JtRGF0YSAmJiB0aGlzLmZpZWxkKSB7XHJcblx0XHRcdHRoaXMuZm9ybUNvbnRyb2wgPSB0aGlzLmZvcm1EYXRhPy5mb3JtR3JvdXAuZ2V0KHRoaXMuZmllbGQubmFtZSkgYXMgRm9ybUNvbnRyb2w7XHJcblx0XHRcdHRoaXMuZm9ybUNvbnRyb2wuc2V0VmFsdWUodGhpcy50b2RheSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdGRhdGVDaGFuZ2UoXyRldmVudDogYW55KSB7XHJcblx0XHR0aGlzLmZvcm1Db250cm9sPy5zZXRWYWx1ZSgodGhpcy5mb3JtQ29udHJvbD8udmFsdWUpLmZvcm1hdChcIllZWVktTU0tRERcIikpXHJcblx0fVxyXG59IiwiPG1hdC1mb3JtLWZpZWxkIGNsYXNzPVwiY29sLW1kLTEyXCIgYXBwZWFyYW5jZT1cImZpbGxcIj5cclxuXHQ8bWF0LWxhYmVsPnt7ZmllbGQ/LmxhYmVsfX08c3BhbiAqbmdJZj1cIiFmaWVsZD8uaXNSZXF1aXJlZFwiIGNsYXNzPVwib3B0aW9uYWxcIj4ob3B0aW9uYWwpPC9zcGFuPjwvbWF0LWxhYmVsPlxyXG5cdDxpbnB1dCBtYXRJbnB1dCBbbWF0RGF0ZXBpY2tlcl09XCJwaWNrZXJcIiBbcmVxdWlyZWRdPVwiZmllbGQ/LmlzUmVxdWlyZWRcIiBbZm9ybUNvbnRyb2xdPWZvcm1Db250cm9sXHJcblx0XHQoZGF0ZUNoYW5nZSk9XCJkYXRlQ2hhbmdlKCRldmVudClcIj5cclxuXHQ8bWF0LWRhdGVwaWNrZXItdG9nZ2xlIG1hdFN1ZmZpeCBbZm9yXT1cInBpY2tlclwiIHN0eWxlPVwib3V0bGluZTogbm9uZTtcIj48L21hdC1kYXRlcGlja2VyLXRvZ2dsZT5cclxuXHQ8bWF0LWRhdGVwaWNrZXIgc3R5bGU9XCJvdXRsaW5lOiBub25lO1wiICNwaWNrZXI+PC9tYXQtZGF0ZXBpY2tlcj5cclxuPC9tYXQtZm9ybS1maWVsZD4iXX0=