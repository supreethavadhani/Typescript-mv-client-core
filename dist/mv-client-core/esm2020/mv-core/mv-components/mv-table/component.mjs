import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource, MatTable } from '@angular/material/table';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/material/button";
import * as i3 from "@angular/material/sort";
import * as i4 from "@angular/material/table";
export class MvTableComponent {
    constructor() {
        this.editAction = new EventEmitter();
        this.tableData = { data: [], metaData: {} };
        this.values = [];
        this.colored = [];
        this.separatorKeysCodes = [13, 9, 188];
        this.isView = 'auto';
        this.dropdownShow = false;
        this.filters = {};
    }
    update() {
        this.isView = this.tableData.metaData.view ? 'pointer' : 'auto';
        this.tableData = this.tableGridData;
        this.columns = this.tableData.metaData.column_names;
        this.tempDatasource = this.tableGridData.data;
        this.tempDatasource = this.tableGridData.data;
        this.tableData.metaData.column_names = this.tableData.metaData.column_names.concat(['edit']);
        this.dataSource = new MatTableDataSource(this.tableData.data);
        this.dataSource.sort = this.sort;
    }
    getColumnData(fd) {
        let tableData = {
            data: [],
            metaData: {
                column_names: [],
                display_names: {},
            },
        };
        fd.form.fields.forEach(i => {
            if (i.controlType == 'Input') {
                tableData.metaData.column_names.push(i.name);
                tableData.metaData.display_names[i.name] = i.label;
            }
        });
        return tableData;
    }
    fetchRowNumberEdit(rowData) {
        this.rowNumber = this.tempDatasource.indexOf(rowData);
        console.log(this.rowNumber);
        this.editAction.next(this.rowNumber);
    }
}
MvTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: MvTableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
MvTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.3", type: MvTableComponent, selector: "app-mv-table", inputs: { tableGridData: "tableGridData" }, outputs: { editAction: "editAction" }, viewQueries: [{ propertyName: "table", first: true, predicate: MatTable, descendants: true, static: true }, { propertyName: "sort", first: true, predicate: MatSort, descendants: true, static: true }], ngImport: i0, template: "<div class=\"table-container\" id=\"tableContainer\">\r\n  <table mat-table [dataSource]=\"dataSource\" matSort>\r\n    <ng-container *ngFor=\"let i of tableData.metaData.column_names; let index=index\" matColumnDef=\"{{i}}\">\r\n      <ng-container *ngIf=\"i=='edit'; else dataPart\">\r\n        <th mat-header-cell *matHeaderCellDef>\r\n        </th>\r\n        <td style=\"padding-right: 14px;\" mat-cell *matCellDef=\"let element;let rowData=$implicit;\" class=\"edit\"\r\n          (click)=\"fetchRowNumberEdit(rowData)\"><button style=\"outline: none;\" mat-button>EDIT</button></td>\r\n      </ng-container>\r\n      <ng-template #dataPart>\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n          {{tableData.metaData.display_names[i]}}\r\n        </th>\r\n        <td mat-cell *matCellDef=\"let element;\">{{element[i]}}</td>\r\n      </ng-template>\r\n    </ng-container>\r\n    <tr mat-header-row *matHeaderRowDef=\" tableData.metaData.column_names;sticky: true\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: tableData.metaData.column_names;\"></tr>\r\n  </table>\r\n</div>\r\n", styles: [".table-container{max-height:50vh;overflow:auto;padding-left:2rem;padding-right:1rem;margin-right:1.875rem;margin:2rem}table{width:100%}tr.mat-header-row{height:3.125rem;font-weight:700}th{height:3.125rem;font-family:Lato!important;font-size:1.1vw;color:#004faa;border-bottom:none!important}td{height:3.125rem;cursor:pointer;border-bottom:1px dashed #e0e0e0!important;font-size:.937vw;color:#0009}:host ::ng-deep .mat-form-field-wrapper{padding-bottom:0!important}:host ::ng-deep .mat-form-field-infix{width:auto}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "directive", type: i3.MatSort, selector: "[matSort]", inputs: ["matSortDisabled", "matSortActive", "matSortStart", "matSortDirection", "matSortDisableClear"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { kind: "component", type: i3.MatSortHeader, selector: "[mat-sort-header]", inputs: ["disabled", "mat-sort-header", "arrowPosition", "start", "sortActionDescription", "disableClear"], exportAs: ["matSortHeader"] }, { kind: "component", type: i4.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { kind: "directive", type: i4.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { kind: "directive", type: i4.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { kind: "directive", type: i4.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { kind: "directive", type: i4.MatCellDef, selector: "[matCellDef]" }, { kind: "directive", type: i4.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { kind: "directive", type: i4.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { kind: "directive", type: i4.MatCell, selector: "mat-cell, td[mat-cell]" }, { kind: "component", type: i4.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { kind: "component", type: i4.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: MvTableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-mv-table', template: "<div class=\"table-container\" id=\"tableContainer\">\r\n  <table mat-table [dataSource]=\"dataSource\" matSort>\r\n    <ng-container *ngFor=\"let i of tableData.metaData.column_names; let index=index\" matColumnDef=\"{{i}}\">\r\n      <ng-container *ngIf=\"i=='edit'; else dataPart\">\r\n        <th mat-header-cell *matHeaderCellDef>\r\n        </th>\r\n        <td style=\"padding-right: 14px;\" mat-cell *matCellDef=\"let element;let rowData=$implicit;\" class=\"edit\"\r\n          (click)=\"fetchRowNumberEdit(rowData)\"><button style=\"outline: none;\" mat-button>EDIT</button></td>\r\n      </ng-container>\r\n      <ng-template #dataPart>\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n          {{tableData.metaData.display_names[i]}}\r\n        </th>\r\n        <td mat-cell *matCellDef=\"let element;\">{{element[i]}}</td>\r\n      </ng-template>\r\n    </ng-container>\r\n    <tr mat-header-row *matHeaderRowDef=\" tableData.metaData.column_names;sticky: true\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: tableData.metaData.column_names;\"></tr>\r\n  </table>\r\n</div>\r\n", styles: [".table-container{max-height:50vh;overflow:auto;padding-left:2rem;padding-right:1rem;margin-right:1.875rem;margin:2rem}table{width:100%}tr.mat-header-row{height:3.125rem;font-weight:700}th{height:3.125rem;font-family:Lato!important;font-size:1.1vw;color:#004faa;border-bottom:none!important}td{height:3.125rem;cursor:pointer;border-bottom:1px dashed #e0e0e0!important;font-size:.937vw;color:#0009}:host ::ng-deep .mat-form-field-wrapper{padding-bottom:0!important}:host ::ng-deep .mat-form-field-infix{width:auto}\n"] }]
        }], propDecorators: { tableGridData: [{
                type: Input
            }], editAction: [{
                type: Output
            }], table: [{
                type: ViewChild,
                args: [MatTable, { static: true }]
            }], sort: [{
                type: ViewChild,
                args: [MatSort, { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,